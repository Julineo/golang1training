{
  "total_count": 23871,
  "incomplete_results": false,
  "items": [
    {
      "url": "https://api.github.com/repos/golang/go/issues/23899",
      "repository_url": "https://api.github.com/repos/golang/go",
      "labels_url": "https://api.github.com/repos/golang/go/issues/23899/labels{/name}",
      "comments_url": "https://api.github.com/repos/golang/go/issues/23899/comments",
      "events_url": "https://api.github.com/repos/golang/go/issues/23899/events",
      "html_url": "https://github.com/golang/go/issues/23899",
      "id": 298042785,
      "number": 23899,
      "title": "reflect: TestStructOfWithInterface failure with cgocheck=2",
      "user": {
        "login": "sternix",
        "id": 10338420,
        "avatar_url": "https://avatars0.githubusercontent.com/u/10338420?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sternix",
        "html_url": "https://github.com/sternix",
        "followers_url": "https://api.github.com/users/sternix/followers",
        "following_url": "https://api.github.com/users/sternix/following{/other_user}",
        "gists_url": "https://api.github.com/users/sternix/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/sternix/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/sternix/subscriptions",
        "organizations_url": "https://api.github.com/users/sternix/orgs",
        "repos_url": "https://api.github.com/users/sternix/repos",
        "events_url": "https://api.github.com/users/sternix/events{/privacy}",
        "received_events_url": "https://api.github.com/users/sternix/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [
        {
          "id": 373402289,
          "url": "https://api.github.com/repos/golang/go/labels/NeedsInvestigation",
          "name": "NeedsInvestigation",
          "color": "ededed",
          "default": false
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [

      ],
      "milestone": null,
      "comments": 0,
      "created_at": "2018-02-17T22:44:59Z",
      "updated_at": "2018-02-18T01:29:28Z",
      "closed_at": null,
      "author_association": "NONE",
      "body": "Please answer these questions before submitting your issue. Thanks!\r\n\r\n\r\n### What version of Go are you using (`go version`)?\r\ngo version go1.10 freebsd/amd64\r\n\r\n### Does this issue reproduce with the latest release?\r\nYes\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\nGOARCH=\"amd64\"\r\nGOBIN=\"\"\r\nGOCACHE=\"/home/sternix/.cache/go-build\"\r\nGOEXE=\"\"\r\nGOHOSTARCH=\"amd64\"\r\nGOHOSTOS=\"freebsd\"\r\nGOOS=\"freebsd\"\r\nGOPATH=\"/home/sternix/go\"\r\nGORACE=\"\"\r\nGOROOT=\"/opt/go/1_10/go\"\r\nGOTMPDIR=\"\"\r\nGOTOOLDIR=\"/opt/go/1_10/go/pkg/tool/freebsd_amd64\"\r\nGCCGO=\"gccgo\"\r\nCC=\"clang\"\r\nCXX=\"clang++\"\r\nCGO_ENABLED=\"1\"\r\nCGO_CFLAGS=\"-g -O2\"\r\nCGO_CPPFLAGS=\"\"\r\nCGO_CXXFLAGS=\"-g -O2\"\r\nCGO_FFLAGS=\"-g -O2\"\r\nCGO_LDFLAGS=\"-g -O2\"\r\nPKG_CONFIG=\"pkg-config\"\r\nGOGCCFLAGS=\"-fPIC -m64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -fdebug-prefix-map=/tmp/go-build875902433=/tmp/go-build -gno-record-gcc-switches\"\r\n\r\n\r\n### What did you do?\r\ni install go to the directory /opt/go/1_10\r\nand set env variable GODEBUG cgocheck=2\r\n\r\ncd /opt/go/1_10/go/src/reflect\r\ngo test -v .\r\n\r\n....\r\n=== RUN   TestStructOfWithInterface\r\nwrite of Go pointer 0xc4203a0000 to non-Go memory 0x800bd15d0\r\nfatal error: Go pointer stored into non-Go memory\r\n\r\nruntime stack:\r\nruntime.throw(0x6337d9, 0x24)\r\n        /opt/go/1_10/go/src/runtime/panic.go:619 +0x81\r\nruntime.cgoCheckWriteBarrier.func1()\r\n        /opt/go/1_10/go/src/runtime/cgocheck.go:48 +0xa9\r\nruntime.systemstack(0x0)\r\n        /opt/go/1_10/go/src/runtime/asm_amd64.s:409 +0x79\r\nruntime.mstart()\r\n        /opt/go/1_10/go/src/runtime/proc.go:1170\r\n\r\ngoroutine 58 [running]:\r\nruntime.systemstack_switch()\r\n        /opt/go/1_10/go/src/runtime/asm_amd64.s:363 fp=0xc420071920 sp=0xc420071918 pc=0x455e90\r\nruntime.cgoCheckWriteBarrier(0x800bd15d0, 0xc4203a0000)\r\n        /opt/go/1_10/go/src/runtime/cgocheck.go:46 +0xaa fp=0xc420071958 sp=0xc420071920 pc=0x40299a\r\nruntime.wbBufFlush(0x800bd15d0, 0xc4203a0000)\r\n        /opt/go/1_10/go/src/runtime/mwbbuf.go:169 +0x6b fp=0xc420071978 sp=0xc420071958 pc=0x426d7b\r\nruntime.gcWriteBarrier(0x20, 0x0, 0x9b0e60, 0x800bd15c8, 0xc420466fc0, 0x199, 0xc4203a0000, 0xc420466fc8, 0x4af056, 0x5e6bc0, ...)\r\n        /opt/go/1_10/go/src/runtime/asm_amd64.s:2442 +0xb4 fp=0xc420071a00 sp=0xc420071978 pc=0x458a34\r\nruntime.getitab(0x5ef920, 0xc4203a0000, 0xc4203a0001, 0xc420466fc8)\r\n        /opt/go/1_10/go/src/runtime/iface.go:68 +0x43b fp=0xc420071a78 sp=0xc420071a00 pc=0x40d17b\r\nruntime.assertE2I2(0x5ef920, 0xc4203a0000, 0xc420466fc8, 0xc4203a0000, 0xc420466fc8, 0x82)\r\n        /opt/go/1_10/go/src/runtime/iface.go:592 +0x43 fp=0xc420071aa8 sp=0xc420071a78 pc=0x40e5c3\r\nreflect_test.TestStructOfWithInterface(0xc4200ac4b0)\r\n        /opt/go/1_10/go/src/reflect/all_test.go:4890 +0x742 fp=0xc420071fa8 sp=0xc420071aa8 pc=0x56f2e2\r\ntesting.tRunner(0xc4200ac4b0, 0x639640)\r\n        /opt/go/1_10/go/src/testing/testing.go:777 +0xd0 fp=0xc420071fd0 sp=0xc420071fa8 pc=0x4dd920\r\nruntime.goexit()\r\n        /opt/go/1_10/go/src/runtime/asm_amd64.s:2361 +0x1 fp=0xc420071fd8 sp=0xc420071fd0 pc=0x458971\r\ncreated by testing.(*T).Run\r\n        /opt/go/1_10/go/src/testing/testing.go:824 +0x2e0\r\n\r\ngoroutine 1 [chan receive]:\r\ntesting.(*T).Run(0xc4200ac4b0, 0x62fb4f, 0x19, 0x639640, 0x1)\r\n        /opt/go/1_10/go/src/testing/testing.go:825 +0x301\r\ntesting.runTests.func1(0xc4200ac000)\r\n        /opt/go/1_10/go/src/testing/testing.go:1063 +0x64\r\ntesting.tRunner(0xc4200ac000, 0xc42003ddf8)\r\n        /opt/go/1_10/go/src/testing/testing.go:777 +0xd0\r\ntesting.runTests(0xc42000a540, 0x98c240, 0x8e, 0x8e, 0x40fc01)\r\n        /opt/go/1_10/go/src/testing/testing.go:1061 +0x2c4\r\ntesting.(*M).Run(0xc4200a8000, 0x0)\r\n        /opt/go/1_10/go/src/testing/testing.go:978 +0x171\r\nmain.main()\r\n        _testmain.go:354 +0x151\r\n\r\ngoroutine 45 [sleep]:\r\ntime.Sleep(0x3b9aca00)\r\n        /opt/go/1_10/go/src/runtime/time.go:102 +0x166\r\nreflect_test.selectWatcher()\r\n        /opt/go/1_10/go/src/reflect/all_test.go:1541 +0x40\r\ncreated by reflect_test.TestSelect.func1\r\n        /opt/go/1_10/go/src/reflect/all_test.go:1271 +0x35\r\nFAIL    reflect 1.594s\r\n\r\n\r\n### What did you expect to see?\r\nSUCCESS\r\n\r\n### What did you see instead?\r\nFAIL\r\n",
      "score": 1.0
    },
    {
      "url": "https://api.github.com/repos/golang/go/issues/23898",
      "repository_url": "https://api.github.com/repos/golang/go",
      "labels_url": "https://api.github.com/repos/golang/go/issues/23898/labels{/name}",
      "comments_url": "https://api.github.com/repos/golang/go/issues/23898/comments",
      "events_url": "https://api.github.com/repos/golang/go/issues/23898/events",
      "html_url": "https://github.com/golang/go/issues/23898",
      "id": 298038818,
      "number": 23898,
      "title": "proposal: http: FileServer: add json content type for directory serving",
      "user": {
        "login": "posener",
        "id": 919294,
        "avatar_url": "https://avatars0.githubusercontent.com/u/919294?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/posener",
        "html_url": "https://github.com/posener",
        "followers_url": "https://api.github.com/users/posener/followers",
        "following_url": "https://api.github.com/users/posener/following{/other_user}",
        "gists_url": "https://api.github.com/users/posener/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/posener/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/posener/subscriptions",
        "organizations_url": "https://api.github.com/users/posener/orgs",
        "repos_url": "https://api.github.com/users/posener/repos",
        "events_url": "https://api.github.com/users/posener/events{/privacy}",
        "received_events_url": "https://api.github.com/users/posener/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [
        {
          "id": 236419512,
          "url": "https://api.github.com/repos/golang/go/labels/Proposal",
          "name": "Proposal",
          "color": "ededed",
          "default": false
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [

      ],
      "milestone": {
        "url": "https://api.github.com/repos/golang/go/milestones/30",
        "html_url": "https://github.com/golang/go/milestone/30",
        "labels_url": "https://api.github.com/repos/golang/go/milestones/30/labels",
        "id": 1373555,
        "number": 30,
        "title": "Proposal",
        "description": "Proposals that are pending (not yet accepted/rejected).\r\n",
        "creator": {
          "login": "rsc",
          "id": 104030,
          "avatar_url": "https://avatars1.githubusercontent.com/u/104030?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/rsc",
          "html_url": "https://github.com/rsc",
          "followers_url": "https://api.github.com/users/rsc/followers",
          "following_url": "https://api.github.com/users/rsc/following{/other_user}",
          "gists_url": "https://api.github.com/users/rsc/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/rsc/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/rsc/subscriptions",
          "organizations_url": "https://api.github.com/users/rsc/orgs",
          "repos_url": "https://api.github.com/users/rsc/repos",
          "events_url": "https://api.github.com/users/rsc/events{/privacy}",
          "received_events_url": "https://api.github.com/users/rsc/received_events",
          "type": "User",
          "site_admin": false
        },
        "open_issues": 229,
        "closed_issues": 365,
        "state": "open",
        "created_at": "2015-10-24T01:40:49Z",
        "updated_at": "2018-02-18T01:26:47Z",
        "due_on": null,
        "closed_at": null
      },
      "comments": 2,
      "created_at": "2018-02-17T21:41:00Z",
      "updated_at": "2018-02-17T22:27:07Z",
      "closed_at": null,
      "author_association": "NONE",
      "body": "Proposal for the http.FileServer:\r\n\r\nIn case that the `Accept` request header contains `application/json`, and the path leads to a directory, return the content of a directory as JSON.",
      "score": 1.0
    },
    {
      "url": "https://api.github.com/repos/golang/go/issues/23897",
      "repository_url": "https://api.github.com/repos/golang/go",
      "labels_url": "https://api.github.com/repos/golang/go/issues/23897/labels{/name}",
      "comments_url": "https://api.github.com/repos/golang/go/issues/23897/comments",
      "events_url": "https://api.github.com/repos/golang/go/issues/23897/events",
      "html_url": "https://github.com/golang/go/issues/23897",
      "id": 298038698,
      "number": 23897,
      "title": "Wndows: Linking .dll files compiles fine but throws error during runtime",
      "user": {
        "login": "datNurd",
        "id": 11464169,
        "avatar_url": "https://avatars1.githubusercontent.com/u/11464169?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/datNurd",
        "html_url": "https://github.com/datNurd",
        "followers_url": "https://api.github.com/users/datNurd/followers",
        "following_url": "https://api.github.com/users/datNurd/following{/other_user}",
        "gists_url": "https://api.github.com/users/datNurd/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/datNurd/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/datNurd/subscriptions",
        "organizations_url": "https://api.github.com/users/datNurd/orgs",
        "repos_url": "https://api.github.com/users/datNurd/repos",
        "events_url": "https://api.github.com/users/datNurd/events{/privacy}",
        "received_events_url": "https://api.github.com/users/datNurd/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [

      ],
      "state": "closed",
      "locked": false,
      "assignee": null,
      "assignees": [

      ],
      "milestone": null,
      "comments": 8,
      "created_at": "2018-02-17T21:39:39Z",
      "updated_at": "2018-02-18T01:14:32Z",
      "closed_at": "2018-02-18T01:14:31Z",
      "author_association": "NONE",
      "body": "Please answer these questions before submitting your issue. Thanks!\r\n\r\n\r\n### What version of Go are you using (`go version`)?\r\ngo version go1.10 windows/386\r\n\r\n### Does this issue reproduce with the latest release?\r\nYes\r\n\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\nWindows 10, 64 bit\r\n\r\n### What did you do?\r\nTried to link a cutom C library using \r\n\r\n\tpackage main\r\n\r\n\t/*\r\n\t\t#cgo CFLAGS: -I./lib\r\n\t\t#cgo LDFLAGS: -L./lib -lkeyboard\r\n\t\t#include <keyboard.h>\r\n\t*/\r\n\timport \"C\"\r\n\timport \"fmt\"\r\n\r\n\tfunc main() {\r\n\t\tfmt.Printf(\"Hello word\\n\")\r\n\t\tC.InitKeyboard()\r\n\r\n\t\tfmt.Printf(\"\\nEnter: \")\r\n\r\n\t\tfor {\r\n\t\t\tr := C.GetCharacter()\r\n\r\n\t\t\tfmt.Printf(\"%c\", r)\r\n\r\n\t\t\tif r == 'q' {\r\n\t\t\t\tbreak\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tC.Closeboard()\r\n\t}\r\n\r\nIf possible, provide a recipe for reproducing the error.\r\nA complete runnable program is good.\r\nA link on play.golang.org is best.\r\n\r\n\r\n### What did you expect to see?\r\nThe built .exe file to run\r\n\r\n### What did you see instead?\r\nThe program compiles/builds with out any error but throws an error at runtime(i.e while executing the .exe file) \"cannot find libkeybaord.dll\", but works/runs fine if the libkeybaord.dll is placed in the same directory as the .go file, so the issue here is I want to understand why its unable to search/locate libkeybaord.dll file present in the 'lib folder' during runtime whereas it is able to locate the libkeyboard.dll  in 'lib' folder and build successfully during compile time.\r\nDirectory structure:\r\nsrc\r\n|_hello.go\r\n|_lib\r\n----|_keyboard.h\r\n----|_keyboard.c\r\n----|_libkeyboard.dll",
      "score": 1.0
    },
    {
      "url": "https://api.github.com/repos/golang/go/issues/23896",
      "repository_url": "https://api.github.com/repos/golang/go",
      "labels_url": "https://api.github.com/repos/golang/go/issues/23896/labels{/name}",
      "comments_url": "https://api.github.com/repos/golang/go/issues/23896/comments",
      "events_url": "https://api.github.com/repos/golang/go/issues/23896/events",
      "html_url": "https://github.com/golang/go/issues/23896",
      "id": 298037623,
      "number": 23896,
      "title": "x/perf/benchstat: support piping results to benchstat",
      "user": {
        "login": "kevinburke",
        "id": 234019,
        "avatar_url": "https://avatars1.githubusercontent.com/u/234019?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/kevinburke",
        "html_url": "https://github.com/kevinburke",
        "followers_url": "https://api.github.com/users/kevinburke/followers",
        "following_url": "https://api.github.com/users/kevinburke/following{/other_user}",
        "gists_url": "https://api.github.com/users/kevinburke/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/kevinburke/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/kevinburke/subscriptions",
        "organizations_url": "https://api.github.com/users/kevinburke/orgs",
        "repos_url": "https://api.github.com/users/kevinburke/repos",
        "events_url": "https://api.github.com/users/kevinburke/events{/privacy}",
        "received_events_url": "https://api.github.com/users/kevinburke/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [

      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [

      ],
      "milestone": {
        "url": "https://api.github.com/repos/golang/go/milestones/22",
        "html_url": "https://github.com/golang/go/milestone/22",
        "labels_url": "https://api.github.com/repos/golang/go/milestones/22/labels",
        "id": 1067491,
        "number": 22,
        "title": "Unreleased",
        "description": "Issues that do not affect released Go code and binaries.\r\n",
        "creator": {
          "login": "rsc",
          "id": 104030,
          "avatar_url": "https://avatars1.githubusercontent.com/u/104030?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/rsc",
          "html_url": "https://github.com/rsc",
          "followers_url": "https://api.github.com/users/rsc/followers",
          "following_url": "https://api.github.com/users/rsc/following{/other_user}",
          "gists_url": "https://api.github.com/users/rsc/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/rsc/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/rsc/subscriptions",
          "organizations_url": "https://api.github.com/users/rsc/orgs",
          "repos_url": "https://api.github.com/users/rsc/repos",
          "events_url": "https://api.github.com/users/rsc/events{/privacy}",
          "received_events_url": "https://api.github.com/users/rsc/received_events",
          "type": "User",
          "site_admin": false
        },
        "open_issues": 821,
        "closed_issues": 1203,
        "state": "open",
        "created_at": "2015-04-14T18:48:22Z",
        "updated_at": "2018-02-17T21:24:05Z",
        "due_on": "2099-12-31T08:00:00Z",
        "closed_at": null
      },
      "comments": 6,
      "created_at": "2018-02-17T21:24:03Z",
      "updated_at": "2018-02-18T02:28:44Z",
      "closed_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "I just want human-readable output for the number of allocations and the time taken. Currently I write this in a Makefile:\r\n\r\n```\r\nBENCHSTAT := $(GOPATH)/bin/benchstat\r\n\r\n$(BENCHSTAT):\r\n\tgo get -u golang.org/x/perf/cmd/benchstat\r\n\r\nbench: $(BENCHSTAT)\r\n\ttmp=$$(mktemp); go list ./... | grep -v vendor | xargs go test -benchtime=2s -bench=. -run='^$$' > \"$$tmp\" 2>&1 && $(BENCHSTAT) \"$$tmp\"\r\n```\r\n\r\nIt would be simpler if you could pipe the results of `go test -bench=.` directly to benchstat, instead of having to send it to a file first.",
      "score": 1.0
    },
    {
      "url": "https://api.github.com/repos/golang/go/issues/23895",
      "repository_url": "https://api.github.com/repos/golang/go",
      "labels_url": "https://api.github.com/repos/golang/go/issues/23895/labels{/name}",
      "comments_url": "https://api.github.com/repos/golang/go/issues/23895/comments",
      "events_url": "https://api.github.com/repos/golang/go/issues/23895/events",
      "html_url": "https://github.com/golang/go/issues/23895",
      "id": 298036496,
      "number": 23895,
      "title": "spec: confusing example in map index expressions section",
      "user": {
        "login": "Quasilyte",
        "id": 6286655,
        "avatar_url": "https://avatars3.githubusercontent.com/u/6286655?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/Quasilyte",
        "html_url": "https://github.com/Quasilyte",
        "followers_url": "https://api.github.com/users/Quasilyte/followers",
        "following_url": "https://api.github.com/users/Quasilyte/following{/other_user}",
        "gists_url": "https://api.github.com/users/Quasilyte/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/Quasilyte/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/Quasilyte/subscriptions",
        "organizations_url": "https://api.github.com/users/Quasilyte/orgs",
        "repos_url": "https://api.github.com/users/Quasilyte/repos",
        "events_url": "https://api.github.com/users/Quasilyte/events{/privacy}",
        "received_events_url": "https://api.github.com/users/Quasilyte/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [

      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [

      ],
      "milestone": null,
      "comments": 2,
      "created_at": "2018-02-17T21:08:00Z",
      "updated_at": "2018-02-17T22:40:37Z",
      "closed_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "From [index expressions](https://golang.org/ref/spec#Index_expressions) section:\r\n> An index expression on a map a of type map[K]V used in an assignment or initialization of the special form yields an additional untyped boolean value. The value of ok is true if the key x is present in the map, and false otherwise. \r\n```go\r\nv, ok = a[x]\r\nv, ok := a[x]\r\nvar v, ok = a[x]\r\nvar v, ok T = a[x] // <- This one. 4th example\r\n```\r\nIt seems like 4th example is only valid when `T` is `bool`, which assumes that map have `bool` as element value type.\r\n\r\nIf this is correct, then `var v, ok T = a[x]` should be either `var v, ok bool = a[x]` or re-phrased in other way (perhaps even removed).",
      "score": 1.0
    },
    {
      "url": "https://api.github.com/repos/golang/go/issues/23894",
      "repository_url": "https://api.github.com/repos/golang/go",
      "labels_url": "https://api.github.com/repos/golang/go/issues/23894/labels{/name}",
      "comments_url": "https://api.github.com/repos/golang/go/issues/23894/comments",
      "events_url": "https://api.github.com/repos/golang/go/issues/23894/events",
      "html_url": "https://github.com/golang/go/issues/23894",
      "id": 298036142,
      "number": 23894,
      "title": "go1.10.windows-{386,amd64} zip distributions contain \"go.exe~\" and \"dist.exe~\"",
      "user": {
        "login": "DHowett",
        "id": 189190,
        "avatar_url": "https://avatars2.githubusercontent.com/u/189190?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/DHowett",
        "html_url": "https://github.com/DHowett",
        "followers_url": "https://api.github.com/users/DHowett/followers",
        "following_url": "https://api.github.com/users/DHowett/following{/other_user}",
        "gists_url": "https://api.github.com/users/DHowett/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/DHowett/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/DHowett/subscriptions",
        "organizations_url": "https://api.github.com/users/DHowett/orgs",
        "repos_url": "https://api.github.com/users/DHowett/repos",
        "events_url": "https://api.github.com/users/DHowett/events{/privacy}",
        "received_events_url": "https://api.github.com/users/DHowett/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [

      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [

      ],
      "milestone": null,
      "comments": 1,
      "created_at": "2018-02-17T21:02:51Z",
      "updated_at": "2018-02-17T22:50:03Z",
      "closed_at": null,
      "author_association": "NONE",
      "body": "Please answer these questions before submitting your issue. Thanks!\r\n\r\n### What version of Go are you using (`go version`)?\r\n1.10\r\n\r\n### Does this issue reproduce with the latest release?\r\nYes\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\nWindows, 386, amd64\r\n\r\n### What did you do?\r\n\r\nDownload the go1.10.windows-amd64.zip archive. Extract it or otherwise inspect its contents.\r\nIt seems to contain `go/bin/go.exe~`\r\n\r\n```\r\n% unzip -l go1.10.windows-amd64.zip | grep \"~$\"\r\n 11180544  2018-02-16 09:14   go/bin/go.exe~\r\n  3551744  2018-02-16 09:14   go/pkg/tool/windows_amd64/dist.exe~\r\n```",
      "score": 1.0
    },
    {
      "url": "https://api.github.com/repos/golang/go/issues/23893",
      "repository_url": "https://api.github.com/repos/golang/go",
      "labels_url": "https://api.github.com/repos/golang/go/issues/23893/labels{/name}",
      "comments_url": "https://api.github.com/repos/golang/go/issues/23893/comments",
      "events_url": "https://api.github.com/repos/golang/go/issues/23893/events",
      "html_url": "https://github.com/golang/go/pull/23893",
      "id": 298031199,
      "number": 23893,
      "title": "cmd/cgo: fix \\'error: function declaration isn’t a prototype [-Werror…",
      "user": {
        "login": "hackwave",
        "id": 33077825,
        "avatar_url": "https://avatars1.githubusercontent.com/u/33077825?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/hackwave",
        "html_url": "https://github.com/hackwave",
        "followers_url": "https://api.github.com/users/hackwave/followers",
        "following_url": "https://api.github.com/users/hackwave/following{/other_user}",
        "gists_url": "https://api.github.com/users/hackwave/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/hackwave/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/hackwave/subscriptions",
        "organizations_url": "https://api.github.com/users/hackwave/orgs",
        "repos_url": "https://api.github.com/users/hackwave/repos",
        "events_url": "https://api.github.com/users/hackwave/events{/privacy}",
        "received_events_url": "https://api.github.com/users/hackwave/received_events",
        "type": "Organization",
        "site_admin": false
      },
      "labels": [
        {
          "id": 831707001,
          "url": "https://api.github.com/repos/golang/go/labels/cla:%20no",
          "name": "cla: no",
          "color": "ce2208",
          "default": false
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [

      ],
      "milestone": null,
      "comments": 2,
      "created_at": "2018-02-17T19:49:02Z",
      "updated_at": "2018-02-17T22:40:02Z",
      "closed_at": null,
      "author_association": "NONE",
      "pull_request": {
        "url": "https://api.github.com/repos/golang/go/pulls/23893",
        "html_url": "https://github.com/golang/go/pull/23893",
        "diff_url": "https://github.com/golang/go/pull/23893.diff",
        "patch_url": "https://github.com/golang/go/pull/23893.patch"
      },
      "body": "While working on a very simple example of calling a Go function from C I ran into a bug that is fairly edge case. It is only present when one tries to export a function with ZERO parameters, if you supply at least one parameter it will work without issue.\r\n\r\n```\r\n# WORKS\r\n//export HelloWorld\r\nfunc HelloWorld(i int) {\r\n\tfmt.Println(\"GO Code!!\", i)\r\n}\r\n```\r\n\r\nHowever if you export a function in a Go source without parameters like:\r\n\r\n```\r\n# DOES NOT WORKS\r\n//export HelloWorld\r\nfunc HelloWorld() {\r\n\tfmt.Println(\"GO Code!!\")\r\n}\r\n```\r\n\r\nIt results in the following error:\r\n\r\n`\"cgo-gcc-export-header-prolog:41:1: error: function declaration isn’t a prototype [-Werror=strict-prototypes]\"`\r\n\r\nThis error occurs because the Go based C Library header is not rendered correctly by `cgo`. Currently `cgo` renders the exported function in the header file incorrectly:\r\n`\r\nextern void HelloWorld();`\r\n\r\nBut C requires requires a function without parameters being defined in a header to be definitively declared meaning 0 input parameters is void not blank:\r\n\r\n`extern void HelloWorld(void);`\r\n\r\nI have corrected this by checking for 0 parameters and in this condition writing void in between the parenthesis, otherwise it continues as it did to write the 1 or more parameters inside the parenthesis. This solves the issue and works for all cases now. \r\n\r\nPlease let me know if there are any issues with this pull request.",
      "score": 1.0
    },
    {
      "url": "https://api.github.com/repos/golang/go/issues/23892",
      "repository_url": "https://api.github.com/repos/golang/go",
      "labels_url": "https://api.github.com/repos/golang/go/issues/23892/labels{/name}",
      "comments_url": "https://api.github.com/repos/golang/go/issues/23892/comments",
      "events_url": "https://api.github.com/repos/golang/go/issues/23892/events",
      "html_url": "https://github.com/golang/go/pull/23892",
      "id": 298030029,
      "number": 23892,
      "title": "cmd/go/internal/work: add -w compiler flag to the whitelist for cgo",
      "user": {
        "login": "rikvdh",
        "id": 1267617,
        "avatar_url": "https://avatars2.githubusercontent.com/u/1267617?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/rikvdh",
        "html_url": "https://github.com/rikvdh",
        "followers_url": "https://api.github.com/users/rikvdh/followers",
        "following_url": "https://api.github.com/users/rikvdh/following{/other_user}",
        "gists_url": "https://api.github.com/users/rikvdh/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/rikvdh/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/rikvdh/subscriptions",
        "organizations_url": "https://api.github.com/users/rikvdh/orgs",
        "repos_url": "https://api.github.com/users/rikvdh/repos",
        "events_url": "https://api.github.com/users/rikvdh/events{/privacy}",
        "received_events_url": "https://api.github.com/users/rikvdh/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [
        {
          "id": 831707000,
          "url": "https://api.github.com/repos/golang/go/labels/cla:%20yes",
          "name": "cla: yes",
          "color": "0e8a16",
          "default": false
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [

      ],
      "milestone": null,
      "comments": 3,
      "created_at": "2018-02-17T19:32:08Z",
      "updated_at": "2018-02-17T22:36:12Z",
      "closed_at": null,
      "author_association": "NONE",
      "pull_request": {
        "url": "https://api.github.com/repos/golang/go/pulls/23892",
        "html_url": "https://github.com/golang/go/pull/23892",
        "diff_url": "https://github.com/golang/go/pull/23892.diff",
        "patch_url": "https://github.com/golang/go/pull/23892.patch"
      },
      "body": "See wellington/go-libsass#54\r\n",
      "score": 1.0
    },
    {
      "url": "https://api.github.com/repos/golang/go/issues/23891",
      "repository_url": "https://api.github.com/repos/golang/go",
      "labels_url": "https://api.github.com/repos/golang/go/issues/23891/labels{/name}",
      "comments_url": "https://api.github.com/repos/golang/go/issues/23891/comments",
      "events_url": "https://api.github.com/repos/golang/go/issues/23891/events",
      "html_url": "https://github.com/golang/go/issues/23891",
      "id": 298019486,
      "number": 23891,
      "title": "doc: unclear sentence in 'Release History'",
      "user": {
        "login": "alicebob",
        "id": 621306,
        "avatar_url": "https://avatars1.githubusercontent.com/u/621306?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/alicebob",
        "html_url": "https://github.com/alicebob",
        "followers_url": "https://api.github.com/users/alicebob/followers",
        "following_url": "https://api.github.com/users/alicebob/following{/other_user}",
        "gists_url": "https://api.github.com/users/alicebob/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/alicebob/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/alicebob/subscriptions",
        "organizations_url": "https://api.github.com/users/alicebob/orgs",
        "repos_url": "https://api.github.com/users/alicebob/repos",
        "events_url": "https://api.github.com/users/alicebob/events{/privacy}",
        "received_events_url": "https://api.github.com/users/alicebob/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [
        {
          "id": 150880209,
          "url": "https://api.github.com/repos/golang/go/labels/Documentation",
          "name": "Documentation",
          "color": "aaffaa",
          "default": false
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": {
        "login": "andybons",
        "id": 365204,
        "avatar_url": "https://avatars3.githubusercontent.com/u/365204?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/andybons",
        "html_url": "https://github.com/andybons",
        "followers_url": "https://api.github.com/users/andybons/followers",
        "following_url": "https://api.github.com/users/andybons/following{/other_user}",
        "gists_url": "https://api.github.com/users/andybons/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/andybons/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/andybons/subscriptions",
        "organizations_url": "https://api.github.com/users/andybons/orgs",
        "repos_url": "https://api.github.com/users/andybons/repos",
        "events_url": "https://api.github.com/users/andybons/events{/privacy}",
        "received_events_url": "https://api.github.com/users/andybons/received_events",
        "type": "User",
        "site_admin": false
      },
      "assignees": [
        {
          "login": "andybons",
          "id": 365204,
          "avatar_url": "https://avatars3.githubusercontent.com/u/365204?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/andybons",
          "html_url": "https://github.com/andybons",
          "followers_url": "https://api.github.com/users/andybons/followers",
          "following_url": "https://api.github.com/users/andybons/following{/other_user}",
          "gists_url": "https://api.github.com/users/andybons/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/andybons/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/andybons/subscriptions",
          "organizations_url": "https://api.github.com/users/andybons/orgs",
          "repos_url": "https://api.github.com/users/andybons/repos",
          "events_url": "https://api.github.com/users/andybons/events{/privacy}",
          "received_events_url": "https://api.github.com/users/andybons/received_events",
          "type": "User",
          "site_admin": false
        }
      ],
      "milestone": {
        "url": "https://api.github.com/repos/golang/go/milestones/62",
        "html_url": "https://github.com/golang/go/milestone/62",
        "labels_url": "https://api.github.com/repos/golang/go/milestones/62/labels",
        "id": 2827591,
        "number": 62,
        "title": "Go1.11",
        "description": "",
        "creator": {
          "login": "rsc",
          "id": 104030,
          "avatar_url": "https://avatars1.githubusercontent.com/u/104030?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/rsc",
          "html_url": "https://github.com/rsc",
          "followers_url": "https://api.github.com/users/rsc/followers",
          "following_url": "https://api.github.com/users/rsc/following{/other_user}",
          "gists_url": "https://api.github.com/users/rsc/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/rsc/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/rsc/subscriptions",
          "organizations_url": "https://api.github.com/users/rsc/orgs",
          "repos_url": "https://api.github.com/users/rsc/repos",
          "events_url": "https://api.github.com/users/rsc/events{/privacy}",
          "received_events_url": "https://api.github.com/users/rsc/received_events",
          "type": "User",
          "site_admin": false
        },
        "open_issues": 767,
        "closed_issues": 113,
        "state": "open",
        "created_at": "2017-10-10T13:39:17Z",
        "updated_at": "2018-02-17T18:36:40Z",
        "due_on": "2018-07-31T07:00:00Z",
        "closed_at": null
      },
      "comments": 2,
      "created_at": "2018-02-17T17:04:19Z",
      "updated_at": "2018-02-17T17:32:53Z",
      "closed_at": null,
      "author_association": "NONE",
      "body": "1.10 got added to the https://golang.org/doc/devel/release.html this morning in https://github.com/golang/go/commit/549cb18a9131221755694c0ccc610ae9a406129d by @andybons, but the page still mentions 1.10 as being in the future:\r\n\r\n    Release Policy ¶\r\n    Each major Go release is supported until there are two newer major releases. For\r\n    example, Go 1.8 is supported until Go 1.10 is released, and Go 1.9 is supported\r\n    until Go 1.11 is released. We fix critical problems, including critical security problems,\r\n    in supported releases as needed by issuing minor revisions (for example, Go 1.9.1,\r\n    Go 1.9.2, and so on). \r\n\r\nThe sentence 'Go 1.8 is supported until Go 1.10 is released' is a bit unclear since 1.10 has been released now. Maybe make it past tense: 'Go 1.8 was supported until Go 1.10 was released'?",
      "score": 1.0
    },
    {
      "url": "https://api.github.com/repos/golang/go/issues/23890",
      "repository_url": "https://api.github.com/repos/golang/go",
      "labels_url": "https://api.github.com/repos/golang/go/issues/23890/labels{/name}",
      "comments_url": "https://api.github.com/repos/golang/go/issues/23890/comments",
      "events_url": "https://api.github.com/repos/golang/go/issues/23890/events",
      "html_url": "https://github.com/golang/go/issues/23890",
      "id": 298011484,
      "number": 23890,
      "title": "cmd/cgo: please provide a way to set errno from a callback",
      "user": {
        "login": "jech",
        "id": 290341,
        "avatar_url": "https://avatars2.githubusercontent.com/u/290341?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/jech",
        "html_url": "https://github.com/jech",
        "followers_url": "https://api.github.com/users/jech/followers",
        "following_url": "https://api.github.com/users/jech/following{/other_user}",
        "gists_url": "https://api.github.com/users/jech/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/jech/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/jech/subscriptions",
        "organizations_url": "https://api.github.com/users/jech/orgs",
        "repos_url": "https://api.github.com/users/jech/repos",
        "events_url": "https://api.github.com/users/jech/events{/privacy}",
        "received_events_url": "https://api.github.com/users/jech/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [
        {
          "id": 373399998,
          "url": "https://api.github.com/repos/golang/go/labels/NeedsFix",
          "name": "NeedsFix",
          "color": "ededed",
          "default": false
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [

      ],
      "milestone": {
        "url": "https://api.github.com/repos/golang/go/milestones/6",
        "html_url": "https://github.com/golang/go/milestone/6",
        "labels_url": "https://api.github.com/repos/golang/go/milestones/6/labels",
        "id": 1055141,
        "number": 6,
        "title": "Unplanned",
        "description": "No plan to fix in any specific release.\r\n",
        "creator": {
          "login": "rsc",
          "id": 104030,
          "avatar_url": "https://avatars1.githubusercontent.com/u/104030?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/rsc",
          "html_url": "https://github.com/rsc",
          "followers_url": "https://api.github.com/users/rsc/followers",
          "following_url": "https://api.github.com/users/rsc/following{/other_user}",
          "gists_url": "https://api.github.com/users/rsc/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/rsc/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/rsc/subscriptions",
          "organizations_url": "https://api.github.com/users/rsc/orgs",
          "repos_url": "https://api.github.com/users/rsc/repos",
          "events_url": "https://api.github.com/users/rsc/events{/privacy}",
          "received_events_url": "https://api.github.com/users/rsc/received_events",
          "type": "User",
          "site_admin": false
        },
        "open_issues": 1124,
        "closed_issues": 948,
        "state": "open",
        "created_at": "2015-04-06T20:47:19Z",
        "updated_at": "2018-02-17T17:21:30Z",
        "due_on": "2099-12-31T08:00:00Z",
        "closed_at": null
      },
      "comments": 2,
      "created_at": "2018-02-17T15:12:56Z",
      "updated_at": "2018-02-17T17:23:01Z",
      "closed_at": null,
      "author_association": "NONE",
      "body": "I'm interfacing with a C library that expects callbacks to return -1 with `errno` set upon error.  As far as I can tell, the only way to set errno in a go function is to call back into C:\r\n\r\n```C\r\nvoid\r\nset_errno(int e)\r\n{\r\n    errno = e;\r\n}\r\n```\r\n\r\n```Go\r\n//export callback\r\nfunc callback(...)  C.int {\r\n    ...\r\n    C.set_errno(C.int(syscall.EAGAIN))\r\n    return -1\r\n    ...\r\n}\r\n```\r\n\r\nThis is in contrast with retrieving `errno` in Go using multiple return values, which I find elegant and Go-like.  Please provide a similarly tasteful way to return from Go to C while setting `errno`. \r\n",
      "score": 1.0
    },
    {
      "url": "https://api.github.com/repos/golang/go/issues/23889",
      "repository_url": "https://api.github.com/repos/golang/go",
      "labels_url": "https://api.github.com/repos/golang/go/issues/23889/labels{/name}",
      "comments_url": "https://api.github.com/repos/golang/go/issues/23889/comments",
      "events_url": "https://api.github.com/repos/golang/go/issues/23889/events",
      "html_url": "https://github.com/golang/go/issues/23889",
      "id": 298008590,
      "number": 23889,
      "title": "cmd/compile: panic: branch too far on arm64",
      "user": {
        "login": "ALTree",
        "id": 3586803,
        "avatar_url": "https://avatars2.githubusercontent.com/u/3586803?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ALTree",
        "html_url": "https://github.com/ALTree",
        "followers_url": "https://api.github.com/users/ALTree/followers",
        "following_url": "https://api.github.com/users/ALTree/following{/other_user}",
        "gists_url": "https://api.github.com/users/ALTree/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/ALTree/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/ALTree/subscriptions",
        "organizations_url": "https://api.github.com/users/ALTree/orgs",
        "repos_url": "https://api.github.com/users/ALTree/repos",
        "events_url": "https://api.github.com/users/ALTree/events{/privacy}",
        "received_events_url": "https://api.github.com/users/ALTree/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [
        {
          "id": 626114820,
          "url": "https://api.github.com/repos/golang/go/labels/release-blocker",
          "name": "release-blocker",
          "color": "b60205",
          "default": false
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [

      ],
      "milestone": {
        "url": "https://api.github.com/repos/golang/go/milestones/62",
        "html_url": "https://github.com/golang/go/milestone/62",
        "labels_url": "https://api.github.com/repos/golang/go/milestones/62/labels",
        "id": 2827591,
        "number": 62,
        "title": "Go1.11",
        "description": "",
        "creator": {
          "login": "rsc",
          "id": 104030,
          "avatar_url": "https://avatars1.githubusercontent.com/u/104030?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/rsc",
          "html_url": "https://github.com/rsc",
          "followers_url": "https://api.github.com/users/rsc/followers",
          "following_url": "https://api.github.com/users/rsc/following{/other_user}",
          "gists_url": "https://api.github.com/users/rsc/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/rsc/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/rsc/subscriptions",
          "organizations_url": "https://api.github.com/users/rsc/orgs",
          "repos_url": "https://api.github.com/users/rsc/repos",
          "events_url": "https://api.github.com/users/rsc/events{/privacy}",
          "received_events_url": "https://api.github.com/users/rsc/received_events",
          "type": "User",
          "site_admin": false
        },
        "open_issues": 767,
        "closed_issues": 113,
        "state": "open",
        "created_at": "2017-10-10T13:39:17Z",
        "updated_at": "2018-02-17T18:36:40Z",
        "due_on": "2018-07-31T07:00:00Z",
        "closed_at": null
      },
      "comments": 2,
      "created_at": "2018-02-17T14:28:05Z",
      "updated_at": "2018-02-17T15:37:38Z",
      "closed_at": null,
      "author_association": "MEMBER",
      "body": "```\r\n$ go version\r\ngo version devel +549cb18a91 Sat Feb 17 04:38:14 2018 +0000 linux/amd64\r\n```\r\n\r\nThe program at the end of this report crashes the tip compiler when built for arm64 with optimizations disabled, as `GOARCH=arm64 go build -gcflags -N crash.go`, with the following error:\r\n\r\n```\r\n# command-line-arguments\r\npanic: branch too far\r\n\r\ngoroutine 8 [running]:\r\ncmd/internal/obj/arm64.(*ctxt7).brdist(0xc00098ddc0, 0xc00014bae8, 0x0, 0xe, 0x2, 0xc0f94017e0)\r\n\tgo/src/cmd/internal/obj/arm64/asm7.go:4672 +0x32a\r\ncmd/internal/obj/arm64.(*ctxt7).asmout(0xc00098ddc0, 0xc00014bae8, 0xf9ec7e, 0xc00098dd50, 0x6, 0x6)\r\n\tgo/src/cmd/internal/obj/arm64/asm7.go:2884 +0x5ab2\r\ncmd/internal/obj/arm64.span7(0xc00000e240, 0xc0005a4070, 0xc00004e480)\r\n\tgo/src/cmd/internal/obj/arm64/asm7.go:787 +0x951\r\ncmd/internal/obj.Flushplist(0xc00000e240, 0xc00098df08, 0xc00004e480, 0x7ffdb24382fe, 0x16)\r\n\tgo/src/cmd/internal/obj/plist.go:107 +0x6ca\r\ncmd/compile/internal/gc.(*Progs).Flush(0xc000081f40)\r\n\tgo/src/cmd/compile/internal/gc/gsubr.go:87 +0xc1\r\ncmd/compile/internal/gc.compileSSA(0xc000001200, 0x1)\r\n\tgo/src/cmd/compile/internal/gc/pgen.go:247 +0x188\r\ncmd/compile/internal/gc.compileFunctions.func2(0xc00059ac60, 0xc0005284a0, 0x1)\r\n\tgo/src/cmd/compile/internal/gc/pgen.go:288 +0x49\r\ncreated by cmd/compile/internal/gc.compileFunctions\r\n\tgo/src/cmd/compile/internal/gc/pgen.go:286 +0x11c\r\n```\r\n\r\n`go tool compile` says:\r\n\r\n```\r\ncrash.go:62:3: branch too far 0x2000 vs 0x2000 [0x0]\r\n00228 (crash.go:10)\tTBZ\t$63, R0, 32996\r\n32996 (crash.go:10)\tJMP\t26972\r\n```\r\n\r\nThe issue is not present in 1.10, and it was introduced in commit cdd961630cd26c5e42a537aaa52c669cf667d0be (cmd/compile: generate tbz/tbnz when comparing against zero on arm64).\r\n\r\nApologies for the reproducer length. The program was generated by a fuzzer and deleting any line makes the crash go away.\r\n\r\n```\r\npackage p\r\n\r\nfunc fun0() {\r\n\tvar B0, B1, B2, B3, B4 bool\r\n\tvar S0, S1 string\r\n\tvar I0, I1, I2, I3, I4 int\r\n\tfor true {\r\n\t\tvar B5, B6 bool\r\n\t\tfor !(S0 >= \"ccc\" || !true || I4 == I3) {\r\n\t\t\tvar I5, I6 int\r\n\t\t\tvar B7, B8 bool\r\n\t\t\tswitch S0[8:10] + (S0) + (S0[1:12]) + (S1[2:15] + S0[5:24]) + (S0 + \"ffffff\") {\r\n\t\t\tcase \"bb\" + S0[0:20] + S1 + (S1 + S1[8:23] + (S1[2:17])) + (S1[1:15] + S0[7:21] + (S0[6:11] + S1 + (\"dddd\" + S1[6:10]))):\r\n\t\t\t\tB3 = S0[8:23]+S0[0:23]+(\"dddd\"+S1[7:21]+(S0[0:21]+S0[3:12]))+(S1+S1+(S1[0:16]+S1)) != \"ffffff\"+S1[1:18] || I2 < I6\r\n\t\t\t\tI2 = 50 + 70 + len([]int{len(\"eeeee\")})\r\n\t\t\t\tS1 = S1[2:15] + S1 + (S1 + S1) + (\"a\" + \"a\")\r\n\t\t\t\tS1 = S0 + S0[0:10] + S0 + S0 + \"dddd\"\r\n\t\t\t\tB1 = I5+I6 > len([]string{S0[4:15] + S1, S0[1:8] + \"dddd\" + (S0[0:14] + S1), S0 + \"ccc\" + (S1 + \"bb\")})\r\n\t\t\t\tS0 = \"eeeee\" + S1[7:15] + (\"bb\" + S0 + (S0[7:22] + \"a\" + (\"ccc\" + S0[7:16] + (S0 + S0)) + (S1[2:8] + S1))) + (S1[8:14] + S1[7:19])\r\n\t\t\t}\r\n\t\t\tfor len([]string{S1[3:11] + S1[0:15] + (\"bb\" + S0) + (\"a\" + S0), S1[2:18] + S1 + (S1[7:15] + S1) + (S1 + \"eeeee\") + (S0 + S1[8:21])}) >= len([]string{S0[0:14] + \"eeeee\"})+(I0+35+len(S0[2:24])) {\r\n\t\t\t\tvar S2 string\r\n\t\t\t\tI0 = len(S1)\r\n\t\t\t\tB3 = false && B2\r\n\t\t\t\tB8 = S1 > S1\r\n\t\t\t\tB8 = \"dddd\" < S1[7:17]\r\n\t\t\t\tS1 = S0 + S1 + (\"dddd\" + S2[6:12] + (S2 + \"ccc\") + (\"a\" + S1[0:13] + (S1[8:15] + S2[0:14] + (S2[6:22] + S2)))) + (S2[6:10] + \"eeeee\" + (S2[3:22] + S0[2:22] + (S0[7:13] + S2[2:20])) + (S1 + S0[1:8] + (S0 + S1[6:13])) + (S0[0:12] + S0[2:14]) + (S0 + S0))\r\n\t\t\t}\r\n\t\t\tswitch len([]bool{I4 > 25}) <= I1+len([]bool{}) || (B8 && B2) != B0 {\r\n\t\t\tcase true && I6 < I0:\r\n\t\t\t\tS0 = S1[7:19] + S1[4:20] + (S0 + S1) + (S0[0:24] + S1) + (\"eeeee\" + S0 + (\"a\" + \"ffffff\" + (S1 + S0) + (S0[0:13] + S0[6:19] + (S1[7:11] + \"ccc\")) + (S1 + S1[1:15] + (S0[3:9] + \"dddd\") + (S1 + S1[6:22])) + (S0 + \"ccc\")) + (S0 + S0 + (\"eeeee\" + S1)))\r\n\t\t\t\tB1 = S1[7:8]+S1+(S1+S1[7:10]) == \"eeeee\"+S0\r\n\t\t\t\tI0 = len([]string{S0[6:9] + S0[8:14] + (\"a\" + \"a\"), S1 + S0 + (S0 + S0) + (S0 + S0 + (S0 + \"bb\" + (\"bb\" + S1)) + (\"bb\" + S1 + (S0[7:19] + S0[5:11])) + (S0 + S0[3:19] + (S0[6:21] + \"bb\" + (S1 + \"a\")) + (S1[0:15] + S0 + (S0[7:24] + S0 + (\"bb\" + \"ffffff\") + (S0 + \"bb\"))) + (S1[4:24] + S1[6:15] + (\"bb\" + S1[7:17])))), \"eeeee\" + S1 + (S0 + S1)})\r\n\t\t\t\tI4 = len(S1)\r\n\t\t\t\tS0 = \"ffffff\" + S1[8:23] + (S0[7:17] + \"eeeee\" + (S1 + S0[2:9]) + (S1[1:20] + S1) + (S0[6:17] + \"bb\")) + (S0[7:20] + S1[1:19] + (S1[8:9] + S0) + (\"a\" + S1[0:14])) + (S0[5:21] + S0 + (S1[8:17] + S0[5:9])) + (\"ffffff\" + S0 + (S0 + S0[4:16])) + (S0 + \"eeeee\")\r\n\t\t\t\tB3 = B1 && B0\r\n\t\t\t\tI5 = len([]bool{})\r\n\t\t\t}\r\n\t\t\tswitch S0[0:9] + S0 + (S0[8:13] + \"bb\" + (\"dddd\" + S1 + (S0[6:23] + \"eeeee\") + (S0[7:9] + \"ffffff\")) + (\"bb\" + S0[3:23])) + (S1[0:21] + \"dddd\" + (S0 + S1 + (S1 + S0[3:15]))) {\r\n\t\t\tcase S1[6:8] + S1:\r\n\t\t\t\tS1 = \"ffffff\" + S0 + (\"ccc\" + S1[2:12] + (S0 + S1)) + (S0 + \"a\") + (S0 + S0 + (S0 + \"eeeee\")) + (S1 + S1[2:10] + (S0 + S0 + (S1[6:18] + \"eeeee\") + (S0[5:16] + S1 + (S1[0:24] + \"a\")))) + (\"a\" + S0 + (S1[7:19] + \"a\" + (S0[2:20] + S1[4:22] + (S1 + S1[2:14])) + (S0 + S1[6:20] + (S0[7:13] + S0 + (S1 + \"ccc\" + (\"ccc\" + S1 + (S0 + S0))))) + (S1 + \"ccc\")))\r\n\t\t\t\tS0 = S0[6:14] + S1 + (S0[5:18] + S0) + (S0 + S1[7:23] + (S1 + \"a\" + (S0[2:19] + S1) + (S1[5:11] + \"eeeee\" + (\"ccc\" + \"bb\")))) + (\"bb\" + S0[5:23] + (S0 + S0))\r\n\t\t\t\tB8 = I6 != I3\r\n\t\t\t\tS0 = S0 + S1 + (\"ffffff\" + S1 + (S0 + S0[2:22]))\r\n\t\t\t\tI6 = I3 + I3 - len([]int{I0 - 57, -19, len([]int{+89 + (len(S1[6:10]) - (I6 - I1)), len(\"a\")})})\r\n\t\t\t\tI6 = len(\"ccc\") - (I0 - I3 + (2 + I1 + len(S1[8:21]) - (len([]int{len([]int{len([]bool{B3 != B6, false || true}), I3 - 0, len(S0[5:13]), len([]bool{S1 != S0, I5 < I5, 81 > I1})}), -I0}) - len([]int{len([]string{S0 + S0}), len([]bool{I1 >= I5 || !B7, B4 && B5}), len(S0[0:12])}))))\r\n\t\t\t\tB8 = !(-(+18 + (88 - I1)) <= 16-I6) && (!(26 <= I4) || S1+S0+(\"a\"+S1+(\"ccc\"+S0)) > S0+\"ffffff\"+(\"eeeee\"+S1)+(S1[5:24]+S1[7:19]+(S0+S0[2:22]+(S0+\"eeeee\"+(S0+S0)+(S1[5:9]+S0[2:13]))+(S1+S0))))\r\n\t\t\t}\r\n\t\t\tI4 = len([]int{len([]string{S1 + S1, \"bb\" + S1 + (S0[2:20] + S0[0:15]) + (S0 + \"dddd\" + (S0[1:12] + S0) + (S0 + S0[2:14]) + (S0 + \"eeeee\"))}) + len([]int{}), len(\"ccc\")}) + len(\"eeeee\")\r\n\t\t\tB0 = !(((B5 || B7) && \"dddd\" <= \"dddd\" || S1[7:8]+S1[1:24]+(S0+S1+(\"ffffff\"+\"dddd\")+(\"ccc\"+S1))+(S1[2:19]+\"ffffff\")+(S1[8:21]+S1[8:21]+(\"a\"+S1[5:9]+(\"ccc\"+\"ffffff\"))) <= S1+\"dddd\") && S0[7:23]+S1[8:9]+(\"dddd\"+\"ffffff\") == S0[3:18]+S1) != (S0[5:15]+S1 > S1[4:23]+S1[5:9]+(S0[3:12]+S0[0:16]) && (!(I0 >= 30) && \"eeeee\"+\"eeeee\" == \"bb\"+S1))\r\n\t\t}\r\n\t\tvar S2, S3 string\r\n\t\tswitch len([]string{}) {\r\n\t\tcase len(S0[8:24]):\r\n\t\t\tS1 = \"ffffff\" + S1[0:14] + (S1[2:23] + \"eeeee\") + (S3 + S1 + (\"ccc\" + S0) + (\"bb\" + S0[5:17]) + (S0 + S2)) + (S1 + S1 + (S2[8:13] + S3 + (\"ffffff\" + S3) + (S3 + S2 + (S0 + S3[6:8] + (S2[4:24] + S3) + (S3[2:19] + S1[5:15])))))\r\n\t\t\tS2 = S2[7:18] + S1[4:21]\r\n\t\t\tS2 = S2 + \"bb\" + (S3[1:10] + \"eeeee\" + (S3[1:23] + S1 + (S0[1:23] + S1) + (S2[5:20] + S1[2:18] + (S2[3:22] + \"dddd\") + (S0 + S2[4:14] + (S1 + S0[8:20]))) + (S3 + S0)))\r\n\t\t\tS1 = S1 + S2[6:24] + (\"eeeee\" + S3 + (S3 + S1 + (S0 + S3[4:8]) + (S3 + S2[8:14])) + (S1[4:8] + S3 + (S1 + S3[1:23] + (S2 + S3)) + (\"a\" + S0[7:21])))\r\n\t\t}\r\n\t\tfor I4+len([]string{\"bb\" + S0}) != -((I1+I4)+len([]bool{!B2, !B5, \"bb\"+S1 >= S1[4:16]+\"ffffff\"})) || 95 > I1 {\r\n\t\t\tS0 = S0[1:24] + S3[1:10] + (\"ccc\" + S2[3:9] + (\"ffffff\" + S0)) + (\"a\" + S0[2:8]) + (S2[4:14] + \"a\" + (S2 + S0[6:12]))\r\n\t\t}\r\n\t}\r\n}\r\n```",
      "score": 1.0
    },
    {
      "url": "https://api.github.com/repos/golang/go/issues/23888",
      "repository_url": "https://api.github.com/repos/golang/go",
      "labels_url": "https://api.github.com/repos/golang/go/issues/23888/labels{/name}",
      "comments_url": "https://api.github.com/repos/golang/go/issues/23888/comments",
      "events_url": "https://api.github.com/repos/golang/go/issues/23888/events",
      "html_url": "https://github.com/golang/go/issues/23888",
      "id": 297995524,
      "number": 23888,
      "title": "cmd/vendor/github.com/google/pprof/internal/binutils: test failure inside a container: TestObjFile",
      "user": {
        "login": "nehaljwani",
        "id": 1779189,
        "avatar_url": "https://avatars0.githubusercontent.com/u/1779189?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/nehaljwani",
        "html_url": "https://github.com/nehaljwani",
        "followers_url": "https://api.github.com/users/nehaljwani/followers",
        "following_url": "https://api.github.com/users/nehaljwani/following{/other_user}",
        "gists_url": "https://api.github.com/users/nehaljwani/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/nehaljwani/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/nehaljwani/subscriptions",
        "organizations_url": "https://api.github.com/users/nehaljwani/orgs",
        "repos_url": "https://api.github.com/users/nehaljwani/repos",
        "events_url": "https://api.github.com/users/nehaljwani/events{/privacy}",
        "received_events_url": "https://api.github.com/users/nehaljwani/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [
        {
          "id": 357033853,
          "url": "https://api.github.com/repos/golang/go/labels/WaitingForInfo",
          "name": "WaitingForInfo",
          "color": "ededed",
          "default": false
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [

      ],
      "milestone": {
        "url": "https://api.github.com/repos/golang/go/milestones/62",
        "html_url": "https://github.com/golang/go/milestone/62",
        "labels_url": "https://api.github.com/repos/golang/go/milestones/62/labels",
        "id": 2827591,
        "number": 62,
        "title": "Go1.11",
        "description": "",
        "creator": {
          "login": "rsc",
          "id": 104030,
          "avatar_url": "https://avatars1.githubusercontent.com/u/104030?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/rsc",
          "html_url": "https://github.com/rsc",
          "followers_url": "https://api.github.com/users/rsc/followers",
          "following_url": "https://api.github.com/users/rsc/following{/other_user}",
          "gists_url": "https://api.github.com/users/rsc/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/rsc/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/rsc/subscriptions",
          "organizations_url": "https://api.github.com/users/rsc/orgs",
          "repos_url": "https://api.github.com/users/rsc/repos",
          "events_url": "https://api.github.com/users/rsc/events{/privacy}",
          "received_events_url": "https://api.github.com/users/rsc/received_events",
          "type": "User",
          "site_admin": false
        },
        "open_issues": 767,
        "closed_issues": 113,
        "state": "open",
        "created_at": "2017-10-10T13:39:17Z",
        "updated_at": "2018-02-17T18:36:40Z",
        "due_on": "2018-07-31T07:00:00Z",
        "closed_at": null
      },
      "comments": 8,
      "created_at": "2018-02-17T10:38:58Z",
      "updated_at": "2018-02-17T18:47:11Z",
      "closed_at": null,
      "author_association": "NONE",
      "body": "Please answer these questions before submitting your issue. Thanks!\r\n\r\n\r\n### What version of Go are you using (`go version`)?\r\ngo 1.10\r\n\r\n### Does this issue reproduce with the latest release?\r\nYes.\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n```\r\nGOARCH=\"amd64\"\r\nGOBIN=\"\"\r\nGOCACHE=\"/root/.cache/go-build\"\r\nGOEXE=\"\"\r\nGOHOSTARCH=\"amd64\"\r\nGOHOSTOS=\"linux\"\r\nGOOS=\"linux\"\r\nGOPATH=\"/root/go\"\r\nGORACE=\"\"\r\nGOROOT=\"/opt/conda/conda-bld/go_1518860727469/work/go\"\r\nGOTMPDIR=\"\"\r\nGOTOOLDIR=\"/opt/conda/conda-bld/go_1518860727469/work/go/pkg/tool/linux_amd64\"\r\nGCCGO=\"gccgo\"\r\nCC=\"gcc\"\r\nCXX=\"g++\"\r\nCGO_ENABLED=\"1\"\r\nCGO_CFLAGS=\"-g -O2\"\r\nCGO_CPPFLAGS=\"\"\r\nCGO_CXXFLAGS=\"-g -O2\"\r\nCGO_FFLAGS=\"-g -O2\"\r\nCGO_LDFLAGS=\"-g -O2\"\r\nPKG_CONFIG=\"pkg-config\"\r\nGOGCCFLAGS=\"-fPIC -m64 -pthread -fmessage-length=0 -fdebug-prefix-map=/tmp/go-build979971167=/tmp/go-build\"\r\n```\r\n\r\n### What did you do?\r\nRan this script: https://github.com/conda-forge/go-feedstock/blob/master/recipe/build.sh\r\n\r\n### What did you expect to see?\r\nAll tests should've passed\r\n\r\n### What did you see instead?\r\n```\r\n--- FAIL: TestObjFile (0.05s)\r\n        binutils_test.go:231: SourceLine: unexpected error write |1: broken pipe\r\nFAIL\r\nFAIL    cmd/vendor/github.com/google/pprof/internal/binutils    0.224s\r\n```\r\n",
      "score": 1.0
    },
    {
      "url": "https://api.github.com/repos/golang/go/issues/23887",
      "repository_url": "https://api.github.com/repos/golang/go",
      "labels_url": "https://api.github.com/repos/golang/go/issues/23887/labels{/name}",
      "comments_url": "https://api.github.com/repos/golang/go/issues/23887/comments",
      "events_url": "https://api.github.com/repos/golang/go/issues/23887/events",
      "html_url": "https://github.com/golang/go/issues/23887",
      "id": 297987453,
      "number": 23887,
      "title": "cmd/vet: declared but not used",
      "user": {
        "login": "sabey",
        "id": 6674423,
        "avatar_url": "https://avatars0.githubusercontent.com/u/6674423?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/sabey",
        "html_url": "https://github.com/sabey",
        "followers_url": "https://api.github.com/users/sabey/followers",
        "following_url": "https://api.github.com/users/sabey/following{/other_user}",
        "gists_url": "https://api.github.com/users/sabey/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/sabey/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/sabey/subscriptions",
        "organizations_url": "https://api.github.com/users/sabey/orgs",
        "repos_url": "https://api.github.com/users/sabey/repos",
        "events_url": "https://api.github.com/users/sabey/events{/privacy}",
        "received_events_url": "https://api.github.com/users/sabey/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [

      ],
      "state": "closed",
      "locked": false,
      "assignee": null,
      "assignees": [

      ],
      "milestone": null,
      "comments": 4,
      "created_at": "2018-02-17T07:49:43Z",
      "updated_at": "2018-02-17T18:33:19Z",
      "closed_at": "2018-02-17T18:33:19Z",
      "author_association": "NONE",
      "body": "### What version of Go are you using (`go version`)?\r\ngo version go1.10 linux/amd64\r\n\r\n### Does this issue reproduce with the latest release?\r\nyes\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\namd64\r\n\r\n### What did you do?\r\nhttps://play.golang.org/p/w8ySRRDrihm\r\n```\r\npackage main\r\n\r\ntype Server struct {\r\n\tCounter func()\r\n}\r\n\r\nfunc main() {\r\n\tcounter := 0\r\n\tserver := &Server{\r\n\t\tCounter: func() {\r\n\t\t\tcounter = 1\r\n\t\t},\r\n\t}\r\n\tfor i := 0; i < 100; i++ {\r\n\t\tserver.Counter()\r\n\t}\r\n}\r\n```\r\n\r\ngo vet // fails, didn't fail pre go1.10\r\ngo run main.go // no problem\r\n\r\nif you change counter = 1 to counter++ or counter = counter + 1 there is no error\r\n\r\n### What did you expect to see?\r\nno error\r\n\r\n### What did you see instead?\r\n\r\n./main.go:8:2: counter declared but not used\r\nvet: typecheck failures\r\n",
      "score": 1.0
    },
    {
      "url": "https://api.github.com/repos/golang/go/issues/23886",
      "repository_url": "https://api.github.com/repos/golang/go",
      "labels_url": "https://api.github.com/repos/golang/go/issues/23886/labels{/name}",
      "comments_url": "https://api.github.com/repos/golang/go/issues/23886/comments",
      "events_url": "https://api.github.com/repos/golang/go/issues/23886/events",
      "html_url": "https://github.com/golang/go/issues/23886",
      "id": 297976779,
      "number": 23886,
      "title": "proposal: Derive interface type from a concrete type",
      "user": {
        "login": "guangda-hu",
        "id": 751752,
        "avatar_url": "https://avatars2.githubusercontent.com/u/751752?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/guangda-hu",
        "html_url": "https://github.com/guangda-hu",
        "followers_url": "https://api.github.com/users/guangda-hu/followers",
        "following_url": "https://api.github.com/users/guangda-hu/following{/other_user}",
        "gists_url": "https://api.github.com/users/guangda-hu/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/guangda-hu/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/guangda-hu/subscriptions",
        "organizations_url": "https://api.github.com/users/guangda-hu/orgs",
        "repos_url": "https://api.github.com/users/guangda-hu/repos",
        "events_url": "https://api.github.com/users/guangda-hu/events{/privacy}",
        "received_events_url": "https://api.github.com/users/guangda-hu/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [
        {
          "id": 150880249,
          "url": "https://api.github.com/repos/golang/go/labels/Go2",
          "name": "Go2",
          "color": "ffaaaa",
          "default": false
        },
        {
          "id": 150880200,
          "url": "https://api.github.com/repos/golang/go/labels/LanguageChange",
          "name": "LanguageChange",
          "color": "ffaaaa",
          "default": false
        },
        {
          "id": 236419512,
          "url": "https://api.github.com/repos/golang/go/labels/Proposal",
          "name": "Proposal",
          "color": "ededed",
          "default": false
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [

      ],
      "milestone": {
        "url": "https://api.github.com/repos/golang/go/milestones/30",
        "html_url": "https://github.com/golang/go/milestone/30",
        "labels_url": "https://api.github.com/repos/golang/go/milestones/30/labels",
        "id": 1373555,
        "number": 30,
        "title": "Proposal",
        "description": "Proposals that are pending (not yet accepted/rejected).\r\n",
        "creator": {
          "login": "rsc",
          "id": 104030,
          "avatar_url": "https://avatars1.githubusercontent.com/u/104030?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/rsc",
          "html_url": "https://github.com/rsc",
          "followers_url": "https://api.github.com/users/rsc/followers",
          "following_url": "https://api.github.com/users/rsc/following{/other_user}",
          "gists_url": "https://api.github.com/users/rsc/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/rsc/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/rsc/subscriptions",
          "organizations_url": "https://api.github.com/users/rsc/orgs",
          "repos_url": "https://api.github.com/users/rsc/repos",
          "events_url": "https://api.github.com/users/rsc/events{/privacy}",
          "received_events_url": "https://api.github.com/users/rsc/received_events",
          "type": "User",
          "site_admin": false
        },
        "open_issues": 229,
        "closed_issues": 365,
        "state": "open",
        "created_at": "2015-10-24T01:40:49Z",
        "updated_at": "2018-02-18T01:26:47Z",
        "due_on": null,
        "closed_at": null
      },
      "comments": 1,
      "created_at": "2018-02-17T04:01:03Z",
      "updated_at": "2018-02-17T08:22:52Z",
      "closed_at": null,
      "author_association": "NONE",
      "body": "I'm not sure if this is a good idea. But I have thought about it several times and would like to share it in case it has not been considered. This is for future versions of Go (probably Go 2.0).\r\n\r\n## Proposal\r\nIt would be nice if there is a way to define an interface type that is the method set of some arbitrary type `T`. My proposal is to simply generalize the existing interface embedding:\r\n```golang\r\ninterface {\r\n  T\r\n}\r\n```\r\nCurrently `T` can only be an interface. The proposal is to allow other types as well, and the interface contains the _method sets_ of all embedded types.\r\n* The same restrictions of struct embedding applies: `T` must not be a pointer type, and for non-interface type, `*T` can also be embeded.\r\n* The rules of interface embedding also applies: the method sets of embedded types must be disjoint.\r\n\r\n## Application\r\nSuppose I need to write the following function that uses a concrete type `someservice.Client`:\r\n```golang\r\nfunc MyFunc(*someservice.Client) {\r\n // ....\r\n}\r\n```\r\nTo write unit test for `MyFunc`, I want to fake `someservice.Client`. An easy way is to change the above code to\r\n```golang\r\ntype myInterface interface {\r\n  // all methods needed\r\n}\r\nvar _ myInterface = &someservice.Client{}\r\nfunc MyFunc(myInterface) {\r\n}\r\n```\r\nHere `myInterface` contains a subset of the method set of `*someservice.Client`. However, if the method set is large, and if I need to change code back and forth (so it's hard to determine which methods are used), it would be tedious to keep `myInterface` up to date. The proposal will solve the problem:\r\n```golang\r\ntype myInterface interface {\r\n  *someservice.Client\r\n}\r\n```\r\n\r\n## Note 1\r\nA google search shows that people have written tools to generate interface from struct: https://github.com/vburenin/ifacemaker (not necessarily to solve the same problem I mentioned though).\r\n\r\n## Note2\r\nAnother note is that I think this can somewhat make \"polymorphism\" easier in Go. Struct embedding is like \"inherence\" in many ways, but not always. Suppose we have\r\n```golang\r\ntype Derived struct {\r\n  Base\r\n}\r\n```\r\nWe still need an interface type that contains the methods of `Base` if we want something that can hold either a `Base` or a `Derived`. And the proposed `interface { Base }` is such an interface.\r\n",
      "score": 1.0
    },
    {
      "url": "https://api.github.com/repos/golang/go/issues/23885",
      "repository_url": "https://api.github.com/repos/golang/go",
      "labels_url": "https://api.github.com/repos/golang/go/issues/23885/labels{/name}",
      "comments_url": "https://api.github.com/repos/golang/go/issues/23885/comments",
      "events_url": "https://api.github.com/repos/golang/go/issues/23885/events",
      "html_url": "https://github.com/golang/go/issues/23885",
      "id": 297975835,
      "number": 23885,
      "title": "proposal: x/crypto/chacha20poly1305: add support for XChaCha20",
      "user": {
        "login": "cyphar",
        "id": 2888411,
        "avatar_url": "https://avatars1.githubusercontent.com/u/2888411?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/cyphar",
        "html_url": "https://github.com/cyphar",
        "followers_url": "https://api.github.com/users/cyphar/followers",
        "following_url": "https://api.github.com/users/cyphar/following{/other_user}",
        "gists_url": "https://api.github.com/users/cyphar/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/cyphar/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/cyphar/subscriptions",
        "organizations_url": "https://api.github.com/users/cyphar/orgs",
        "repos_url": "https://api.github.com/users/cyphar/repos",
        "events_url": "https://api.github.com/users/cyphar/events{/privacy}",
        "received_events_url": "https://api.github.com/users/cyphar/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [
        {
          "id": 236419512,
          "url": "https://api.github.com/repos/golang/go/labels/Proposal",
          "name": "Proposal",
          "color": "ededed",
          "default": false
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [

      ],
      "milestone": {
        "url": "https://api.github.com/repos/golang/go/milestones/30",
        "html_url": "https://github.com/golang/go/milestone/30",
        "labels_url": "https://api.github.com/repos/golang/go/milestones/30/labels",
        "id": 1373555,
        "number": 30,
        "title": "Proposal",
        "description": "Proposals that are pending (not yet accepted/rejected).\r\n",
        "creator": {
          "login": "rsc",
          "id": 104030,
          "avatar_url": "https://avatars1.githubusercontent.com/u/104030?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/rsc",
          "html_url": "https://github.com/rsc",
          "followers_url": "https://api.github.com/users/rsc/followers",
          "following_url": "https://api.github.com/users/rsc/following{/other_user}",
          "gists_url": "https://api.github.com/users/rsc/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/rsc/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/rsc/subscriptions",
          "organizations_url": "https://api.github.com/users/rsc/orgs",
          "repos_url": "https://api.github.com/users/rsc/repos",
          "events_url": "https://api.github.com/users/rsc/events{/privacy}",
          "received_events_url": "https://api.github.com/users/rsc/received_events",
          "type": "User",
          "site_admin": false
        },
        "open_issues": 229,
        "closed_issues": 365,
        "state": "open",
        "created_at": "2015-10-24T01:40:49Z",
        "updated_at": "2018-02-18T01:26:47Z",
        "due_on": null,
        "closed_at": null
      },
      "comments": 6,
      "created_at": "2018-02-17T03:42:13Z",
      "updated_at": "2018-02-18T01:27:01Z",
      "closed_at": null,
      "author_association": "NONE",
      "body": "Currently `golang.org/x/crypto/chacha20poly1305` only supports the IETF ChaCha20, which has a nonce size of 96 bits. However, [according to the folks from libsodium](https://download.libsodium.org/doc/advanced/xchacha20.html), this nonce size is too short to allow you to use random nonces. \r\nHowever, XChaCha20 (which has an extended nonce size of 192 bits, but uses the same underlying construction from my non-cryptographer understanding) has a long enough nonce that random nonces are safe. Here's the quote from `libsodium`:\r\n\r\n> Unlike plain ChaCha20, the nonce is 192 bits long, so that generating a random nonce for every message is safe. If the output of the PRNG is indistinguishable from random data, the probability for a collision to happen is negligible.\r\n\r\nIs there any interest or plan to implement XChaCha20 support? I've found some third-party libraries, but I don't trust them as much as I'd trust `golang.org/x/crypto` maintainers.",
      "score": 1.0
    },
    {
      "url": "https://api.github.com/repos/golang/go/issues/23884",
      "repository_url": "https://api.github.com/repos/golang/go",
      "labels_url": "https://api.github.com/repos/golang/go/issues/23884/labels{/name}",
      "comments_url": "https://api.github.com/repos/golang/go/issues/23884/comments",
      "events_url": "https://api.github.com/repos/golang/go/issues/23884/events",
      "html_url": "https://github.com/golang/go/issues/23884",
      "id": 297973721,
      "number": 23884,
      "title": "crypto/tls: RequireAndVerifyClientCert not rejecting bad client cert on 1.10 that it was on 1.9",
      "user": {
        "login": "psanford",
        "id": 33375,
        "avatar_url": "https://avatars1.githubusercontent.com/u/33375?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/psanford",
        "html_url": "https://github.com/psanford",
        "followers_url": "https://api.github.com/users/psanford/followers",
        "following_url": "https://api.github.com/users/psanford/following{/other_user}",
        "gists_url": "https://api.github.com/users/psanford/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/psanford/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/psanford/subscriptions",
        "organizations_url": "https://api.github.com/users/psanford/orgs",
        "repos_url": "https://api.github.com/users/psanford/repos",
        "events_url": "https://api.github.com/users/psanford/events{/privacy}",
        "received_events_url": "https://api.github.com/users/psanford/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [
        {
          "id": 373402289,
          "url": "https://api.github.com/repos/golang/go/labels/NeedsInvestigation",
          "name": "NeedsInvestigation",
          "color": "ededed",
          "default": false
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [

      ],
      "milestone": {
        "url": "https://api.github.com/repos/golang/go/milestones/70",
        "html_url": "https://github.com/golang/go/milestone/70",
        "labels_url": "https://api.github.com/repos/golang/go/milestones/70/labels",
        "id": 3117381,
        "number": 70,
        "title": "Go1.10.1",
        "description": "",
        "creator": {
          "login": "bradfitz",
          "id": 2621,
          "avatar_url": "https://avatars1.githubusercontent.com/u/2621?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/bradfitz",
          "html_url": "https://github.com/bradfitz",
          "followers_url": "https://api.github.com/users/bradfitz/followers",
          "following_url": "https://api.github.com/users/bradfitz/following{/other_user}",
          "gists_url": "https://api.github.com/users/bradfitz/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/bradfitz/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/bradfitz/subscriptions",
          "organizations_url": "https://api.github.com/users/bradfitz/orgs",
          "repos_url": "https://api.github.com/users/bradfitz/repos",
          "events_url": "https://api.github.com/users/bradfitz/events{/privacy}",
          "received_events_url": "https://api.github.com/users/bradfitz/received_events",
          "type": "User",
          "site_admin": false
        },
        "open_issues": 9,
        "closed_issues": 1,
        "state": "open",
        "created_at": "2018-02-14T19:15:03Z",
        "updated_at": "2018-02-17T03:16:27Z",
        "due_on": "2018-03-01T08:00:00Z",
        "closed_at": null
      },
      "comments": 2,
      "created_at": "2018-02-17T03:09:27Z",
      "updated_at": "2018-02-17T05:01:22Z",
      "closed_at": null,
      "author_association": "NONE",
      "body": "### What version of Go are you using (`go version`)?\r\n\r\n```\r\n$ go version\r\ngo version go1.10 linux/amd64\r\n```\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\nYes\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n```$ go env\r\nGOARCH=\"amd64\"\r\nGOBIN=\"\"\r\nGOCACHE=\"/home/psanford/.cache/go-build\"\r\nGOEXE=\"\"\r\nGOHOSTARCH=\"amd64\"\r\nGOHOSTOS=\"linux\"\r\nGOOS=\"linux\"\r\nGOPATH=\"/home/psanford/projects/nearbuy/storenet/go\"\r\nGORACE=\"\"\r\nGOROOT=\"/usr/local/go\"\r\nGOTMPDIR=\"\"\r\nGOTOOLDIR=\"/usr/local/go/pkg/tool/linux_amd64\"\r\nGCCGO=\"gccgo\"\r\nCC=\"gcc\"\r\nCXX=\"g++\"\r\nCGO_ENABLED=\"1\"\r\nCGO_CFLAGS=\"-g -O2\"\r\nCGO_CPPFLAGS=\"\"\r\nCGO_CXXFLAGS=\"-g -O2\"\r\nCGO_FFLAGS=\"-g -O2\"\r\nCGO_LDFLAGS=\"-g -O2\"\r\nPKG_CONFIG=\"pkg-config\"\r\nGOGCCFLAGS=\"-fPIC -m64 -pthread -fmessage-length=0 -fdebug-prefix-map=/tmp/go-build417289417=/tmp/go-build -gno-record-gcc-switches\"\r\n```\r\n\r\n### What did you do?\r\n\r\nRan the following program on 1.9.4 and 1.10: \r\n\r\nhttps://play.golang.org/p/gt67v9Ih7Te\r\n\r\nThe https server is requiring client certs with `RequireAndVerifyClientCert`. The client is using a weird (bad?) cert that has `ExtKeyUsage: x509.ExtKeyUsageServerAuth` instead of `x509.ExtKeyUsageClientAuth`. \r\n\r\n### What did you expect to see?\r\n\r\nOn 1.9.4 the https server rejects the weird client cert:\r\n\r\n```\r\n2018/02/17 02:19:06 http: TLS handshake error from 127.0.0.1:57370: tls: failed to verify client's certificate: x509: certificate specifies an incompatible key usage\r\npanic: Get https://127.0.0.1:4443: remote error: tls: bad certificate\r\n```\r\n\r\n### What did you see instead?\r\n\r\nOn 1.10 it accepts the client cert.\r\n\r\n```\r\nresponse status: 200 OK\r\nHello, \"/\"\r\ndone\r\n```\r\n",
      "score": 1.0
    },
    {
      "url": "https://api.github.com/repos/golang/go/issues/23883",
      "repository_url": "https://api.github.com/repos/golang/go",
      "labels_url": "https://api.github.com/repos/golang/go/issues/23883/labels{/name}",
      "comments_url": "https://api.github.com/repos/golang/go/issues/23883/comments",
      "events_url": "https://api.github.com/repos/golang/go/issues/23883/events",
      "html_url": "https://github.com/golang/go/issues/23883",
      "id": 297973664,
      "number": 23883,
      "title": "cmd/go: -coverpkg=all gives different coverage value when run on a package list vs ./...",
      "user": {
        "login": "AlexRouSg",
        "id": 5820839,
        "avatar_url": "https://avatars3.githubusercontent.com/u/5820839?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/AlexRouSg",
        "html_url": "https://github.com/AlexRouSg",
        "followers_url": "https://api.github.com/users/AlexRouSg/followers",
        "following_url": "https://api.github.com/users/AlexRouSg/following{/other_user}",
        "gists_url": "https://api.github.com/users/AlexRouSg/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/AlexRouSg/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/AlexRouSg/subscriptions",
        "organizations_url": "https://api.github.com/users/AlexRouSg/orgs",
        "repos_url": "https://api.github.com/users/AlexRouSg/repos",
        "events_url": "https://api.github.com/users/AlexRouSg/events{/privacy}",
        "received_events_url": "https://api.github.com/users/AlexRouSg/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [
        {
          "id": 373402289,
          "url": "https://api.github.com/repos/golang/go/labels/NeedsInvestigation",
          "name": "NeedsInvestigation",
          "color": "ededed",
          "default": false
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [

      ],
      "milestone": {
        "url": "https://api.github.com/repos/golang/go/milestones/62",
        "html_url": "https://github.com/golang/go/milestone/62",
        "labels_url": "https://api.github.com/repos/golang/go/milestones/62/labels",
        "id": 2827591,
        "number": 62,
        "title": "Go1.11",
        "description": "",
        "creator": {
          "login": "rsc",
          "id": 104030,
          "avatar_url": "https://avatars1.githubusercontent.com/u/104030?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/rsc",
          "html_url": "https://github.com/rsc",
          "followers_url": "https://api.github.com/users/rsc/followers",
          "following_url": "https://api.github.com/users/rsc/following{/other_user}",
          "gists_url": "https://api.github.com/users/rsc/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/rsc/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/rsc/subscriptions",
          "organizations_url": "https://api.github.com/users/rsc/orgs",
          "repos_url": "https://api.github.com/users/rsc/repos",
          "events_url": "https://api.github.com/users/rsc/events{/privacy}",
          "received_events_url": "https://api.github.com/users/rsc/received_events",
          "type": "User",
          "site_admin": false
        },
        "open_issues": 767,
        "closed_issues": 113,
        "state": "open",
        "created_at": "2017-10-10T13:39:17Z",
        "updated_at": "2018-02-17T18:36:40Z",
        "due_on": "2018-07-31T07:00:00Z",
        "closed_at": null
      },
      "comments": 3,
      "created_at": "2018-02-17T03:08:14Z",
      "updated_at": "2018-02-17T15:34:24Z",
      "closed_at": null,
      "author_association": "NONE",
      "body": "Please answer these questions before submitting your issue. Thanks!\r\n\r\n\r\n### What version of Go are you using (`go version`)?\r\n1.10\r\n\r\n### Does this issue reproduce with the latest release?\r\nyes\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\nGOARCH=\"amd64\"\r\nGOBIN=\"\"\r\nGOCACHE=\"/home/chotepud/.cache/go-build\"\r\nGOEXE=\"\"\r\nGOHOSTARCH=\"amd64\"\r\nGOHOSTOS=\"linux\"\r\nGOOS=\"linux\"\r\nGOPATH=\"~/go\"\r\nGORACE=\"\"\r\nGOROOT=\"~/.local/go\"\r\nGOTMPDIR=\"\"\r\nGOTOOLDIR=\"~/.local/go/pkg/tool/linux_amd64\"\r\nGCCGO=\"gccgo\"\r\nCC=\"gcc\"\r\nCXX=\"g++\"\r\nCGO_ENABLED=\"1\"\r\nCGO_CFLAGS=\"-g -O2\"\r\nCGO_CPPFLAGS=\"\"\r\nCGO_CXXFLAGS=\"-g -O2\"\r\nCGO_FFLAGS=\"-g -O2\"\r\nCGO_LDFLAGS=\"-g -O2\"\r\nPKG_CONFIG=\"pkg-config\"\r\nGOGCCFLAGS=\"-fPIC -m64 -pthread -fmessage-length=0 -fdebug-prefix-map=/tmp/go-build941063065=/tmp/go-build -gno-record-gcc-switches\"\r\n\r\n### What did you do?\r\n\r\nIf possible, provide a recipe for reproducing the error.\r\nA complete runnable program is good.\r\nA link on play.golang.org is best.\r\n\r\n```\r\npackage test\r\n\r\nimport \"fmt\"\r\n\r\nfunc Foo() {\r\n\tfmt.Println(\"Hello World\")\r\n}\r\n```\r\n\r\n```\r\npackage test_test\r\n\r\nimport (\r\n\t\"testing\"\r\n\r\n\t\"github.com/AlexRouSg/test\"\r\n)\r\n\r\nfunc TestFoo(t *testing.T) {\r\n\ttest.Foo()\r\n}\r\n\r\n```\r\nRun both `go test -coverpkg=all` and `go test -coverpkg=all ./...`\r\n\r\n### What did you expect to see?\r\nSame coverage value for `go test -coverpkg=all` vs `go test -coverpkg=all ./...`\r\n\r\n### What did you see instead?\r\n`go test -coverpkg=all ./...`\r\n> ok      github.com/AlexRouSg/test       0.002s  coverage: 16.1% of statements in all\r\n\r\n`go test -coverpkg=all` \r\n> Hello World\r\n> PASS\r\n> coverage: 14.8% of statements in all\r\n> ok      github.com/AlexRouSg/test       0.002s\r\n\r\nIn actual packages the difference could be as big as `go test -coverpkg=all ./...` 47.3% vs `go test -coverpkg=all` 94.4% when comparing the same package.\r\n",
      "score": 1.0
    },
    {
      "url": "https://api.github.com/repos/golang/go/issues/23882",
      "repository_url": "https://api.github.com/repos/golang/go",
      "labels_url": "https://api.github.com/repos/golang/go/issues/23882/labels{/name}",
      "comments_url": "https://api.github.com/repos/golang/go/issues/23882/comments",
      "events_url": "https://api.github.com/repos/golang/go/issues/23882/events",
      "html_url": "https://github.com/golang/go/issues/23882",
      "id": 297964947,
      "number": 23882,
      "title": "cmd/go: -coverpkg=all -race = signal: segmentation fault (core dumped)",
      "user": {
        "login": "AlexRouSg",
        "id": 5820839,
        "avatar_url": "https://avatars3.githubusercontent.com/u/5820839?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/AlexRouSg",
        "html_url": "https://github.com/AlexRouSg",
        "followers_url": "https://api.github.com/users/AlexRouSg/followers",
        "following_url": "https://api.github.com/users/AlexRouSg/following{/other_user}",
        "gists_url": "https://api.github.com/users/AlexRouSg/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/AlexRouSg/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/AlexRouSg/subscriptions",
        "organizations_url": "https://api.github.com/users/AlexRouSg/orgs",
        "repos_url": "https://api.github.com/users/AlexRouSg/repos",
        "events_url": "https://api.github.com/users/AlexRouSg/events{/privacy}",
        "received_events_url": "https://api.github.com/users/AlexRouSg/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [
        {
          "id": 373402289,
          "url": "https://api.github.com/repos/golang/go/labels/NeedsInvestigation",
          "name": "NeedsInvestigation",
          "color": "ededed",
          "default": false
        },
        {
          "id": 626114820,
          "url": "https://api.github.com/repos/golang/go/labels/release-blocker",
          "name": "release-blocker",
          "color": "b60205",
          "default": false
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [

      ],
      "milestone": {
        "url": "https://api.github.com/repos/golang/go/milestones/70",
        "html_url": "https://github.com/golang/go/milestone/70",
        "labels_url": "https://api.github.com/repos/golang/go/milestones/70/labels",
        "id": 3117381,
        "number": 70,
        "title": "Go1.10.1",
        "description": "",
        "creator": {
          "login": "bradfitz",
          "id": 2621,
          "avatar_url": "https://avatars1.githubusercontent.com/u/2621?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/bradfitz",
          "html_url": "https://github.com/bradfitz",
          "followers_url": "https://api.github.com/users/bradfitz/followers",
          "following_url": "https://api.github.com/users/bradfitz/following{/other_user}",
          "gists_url": "https://api.github.com/users/bradfitz/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/bradfitz/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/bradfitz/subscriptions",
          "organizations_url": "https://api.github.com/users/bradfitz/orgs",
          "repos_url": "https://api.github.com/users/bradfitz/repos",
          "events_url": "https://api.github.com/users/bradfitz/events{/privacy}",
          "received_events_url": "https://api.github.com/users/bradfitz/received_events",
          "type": "User",
          "site_admin": false
        },
        "open_issues": 9,
        "closed_issues": 1,
        "state": "open",
        "created_at": "2018-02-14T19:15:03Z",
        "updated_at": "2018-02-17T03:16:27Z",
        "due_on": "2018-03-01T08:00:00Z",
        "closed_at": null
      },
      "comments": 1,
      "created_at": "2018-02-17T01:13:05Z",
      "updated_at": "2018-02-17T03:15:17Z",
      "closed_at": null,
      "author_association": "NONE",
      "body": "Please answer these questions before submitting your issue. Thanks!\r\n\r\n\r\n### What version of Go are you using (`go version`)?\r\n1.10\r\n\r\n### Does this issue reproduce with the latest release?\r\nyes\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\nGOARCH=\"amd64\"\r\nGOBIN=\"\"\r\nGOCACHE=\"/home/chotepud/.cache/go-build\"\r\nGOEXE=\"\"\r\nGOHOSTARCH=\"amd64\"\r\nGOHOSTOS=\"linux\"\r\nGOOS=\"linux\"\r\nGOPATH=\"~/go\"\r\nGORACE=\"\"\r\nGOROOT=\"~/.local/go\"\r\nGOTMPDIR=\"\"\r\nGOTOOLDIR=\"~/.local/go/pkg/tool/linux_amd64\"\r\nGCCGO=\"gccgo\"\r\nCC=\"gcc\"\r\nCXX=\"g++\"\r\nCGO_ENABLED=\"1\"\r\nCGO_CFLAGS=\"-g -O2\"\r\nCGO_CPPFLAGS=\"\"\r\nCGO_CXXFLAGS=\"-g -O2\"\r\nCGO_FFLAGS=\"-g -O2\"\r\nCGO_LDFLAGS=\"-g -O2\"\r\nPKG_CONFIG=\"pkg-config\"\r\nGOGCCFLAGS=\"-fPIC -m64 -pthread -fmessage-length=0 -fdebug-prefix-map=/tmp/go-build941063065=/tmp/go-build -gno-record-gcc-switches\"\r\n\r\n\r\n### What did you do?\r\n\r\nIf possible, provide a recipe for reproducing the error.\r\nA complete runnable program is good.\r\nA link on play.golang.org is best.\r\n\r\n`go test -race -coverpkg=all ./...`\r\n\r\nContent of test functions is irreverent, could be completely empty.\r\n\r\n### What did you expect to see?\r\nTest run as normal\r\n\r\n### What did you see instead?\r\n```\r\nsignal: segmentation fault (core dumped)\r\nFAIL    github.com/AlexRouSg/test       0.110s\r\n?       github.com/AlexRouSg/test/foo   [no test files]\r\n```\r\n",
      "score": 1.0
    },
    {
      "url": "https://api.github.com/repos/golang/go/issues/23881",
      "repository_url": "https://api.github.com/repos/golang/go",
      "labels_url": "https://api.github.com/repos/golang/go/issues/23881/labels{/name}",
      "comments_url": "https://api.github.com/repos/golang/go/issues/23881/comments",
      "events_url": "https://api.github.com/repos/golang/go/issues/23881/events",
      "html_url": "https://github.com/golang/go/issues/23881",
      "id": 297955665,
      "number": 23881,
      "title": "path/filepath: go test fails when GOROOT isn't writeable",
      "user": {
        "login": "shurcooL",
        "id": 1924134,
        "avatar_url": "https://avatars3.githubusercontent.com/u/1924134?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/shurcooL",
        "html_url": "https://github.com/shurcooL",
        "followers_url": "https://api.github.com/users/shurcooL/followers",
        "following_url": "https://api.github.com/users/shurcooL/following{/other_user}",
        "gists_url": "https://api.github.com/users/shurcooL/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/shurcooL/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/shurcooL/subscriptions",
        "organizations_url": "https://api.github.com/users/shurcooL/orgs",
        "repos_url": "https://api.github.com/users/shurcooL/repos",
        "events_url": "https://api.github.com/users/shurcooL/events{/privacy}",
        "received_events_url": "https://api.github.com/users/shurcooL/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [

      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [

      ],
      "milestone": null,
      "comments": 2,
      "created_at": "2018-02-16T23:58:39Z",
      "updated_at": "2018-02-17T00:18:17Z",
      "closed_at": null,
      "author_association": "MEMBER",
      "body": "### What version of Go are you using (`go version`)?\r\n\r\n```\r\n$ go version\r\ngo version go1.10 darwin/amd64\r\n```\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\nYes, with Go 1.10 (final).\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\n<details><br>\r\n\r\n```\r\nGOARCH=\"amd64\"\r\nGOBIN=\"\"\r\nGOCACHE=\"/Users/Dmitri/Library/Caches/go-build\"\r\nGOEXE=\"\"\r\nGOHOSTARCH=\"amd64\"\r\nGOHOSTOS=\"darwin\"\r\nGOOS=\"darwin\"\r\nGOPATH=\"/Users/Dmitri/Dropbox/Work/2013/GoLanding:/Users/Dmitri/Dropbox/Work/2013/GoLand\"\r\nGORACE=\"\"\r\nGOROOT=\"/usr/local/go\"\r\nGOTMPDIR=\"\"\r\nGOTOOLDIR=\"/usr/local/go/pkg/tool/darwin_amd64\"\r\nGCCGO=\"gccgo\"\r\nCC=\"clang\"\r\nCXX=\"clang++\"\r\nCGO_ENABLED=\"1\"\r\nCGO_CFLAGS=\"-g -O2\"\r\nCGO_CPPFLAGS=\"\"\r\nCGO_CXXFLAGS=\"-g -O2\"\r\nCGO_FFLAGS=\"-g -O2\"\r\nCGO_LDFLAGS=\"-g -O2\"\r\nPKG_CONFIG=\"pkg-config\"\r\nGOGCCFLAGS=\"-fPIC -m64 -pthread -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -fdebug-prefix-map=/var/folders/tw/kgz4v2kn4n7d7ryg5k_z3dk40000gn/T/go-build654935185=/tmp/go-build -gno-record-gcc-switches -fno-common\"\r\n```\r\n\r\n</details>\r\n\r\n### What did you do?\r\n\r\n1. Install Go 1.10 via `go1.10.darwin-amd64.pkg` installer on a Mac.\r\n2. Observe that GOROOT isn't writeable by normal user. (I'm happy about this, it helps me avoid accidentally changing its contents.)\r\n3. Run `go test path/filepath`.\r\n\r\n### What did you expect to see?\r\n\r\n```\r\n$ go test path/filepath\r\nok  \tpath/filepath\t0.027s\r\n```\r\n\r\n### What did you see instead?\r\n\r\n```\r\n~ $ go test path/filepath\r\n--- FAIL: TestWalk (0.00s)\r\n\tpath_test.go:367: makeTree: open testdata/a: no such file or directory\r\n\tpath_test.go:367: makeTree: open testdata/c: no such file or directory\r\n\tpath_test.go:367: makeTree: open testdata/d/x: no such file or directory\r\n\tpath_test.go:367: makeTree: open testdata/d/z/u: no such file or directory\r\n\tpath_test.go:367: makeTree: open testdata/d/z/v: no such file or directory\r\npanic: runtime error: invalid memory address or nil pointer dereference [recovered]\r\n\tpanic: runtime error: invalid memory address or nil pointer dereference\r\n[signal SIGSEGV: segmentation violation code=0x1 addr=0x30 pc=0x10f69c6]\r\n\r\ngoroutine 17 [running]:\r\ntesting.tRunner.func1(0xc4200acc30)\r\n\t/usr/local/go/src/testing/testing.go:742 +0x29d\r\npanic(0x11247e0, 0x11fdfd0)\r\n\t/usr/local/go/src/runtime/panic.go:505 +0x229\r\npath/filepath_test.mark(0x0, 0x0, 0x1165a00, 0xc420088720, 0xc42000a320, 0x1, 0x1165a00, 0xc420088720)\r\n\t/usr/local/go/src/path/filepath/path_test.go:392 +0x26\r\npath/filepath_test.TestWalk.func1(0x114b64f, 0x8, 0x0, 0x0, 0x1165a00, 0xc420088720, 0x20, 0x112eee0)\r\n\t/usr/local/go/src/path/filepath/path_test.go:440 +0x5d\r\npath/filepath.Walk(0x114b64f, 0x8, 0xc42000a340, 0xc4200ca000, 0x0)\r\n\t/usr/local/go/src/path/filepath/path.go:401 +0x6c\r\npath/filepath_test.TestWalk(0xc4200acc30)\r\n\t/usr/local/go/src/path/filepath/path_test.go:443 +0x136\r\ntesting.tRunner(0xc4200acc30, 0x11545c8)\r\n\t/usr/local/go/src/testing/testing.go:777 +0xd0\r\ncreated by testing.(*T).Run\r\n\t/usr/local/go/src/testing/testing.go:824 +0x2e0\r\nFAIL\tpath/filepath\t0.012s\r\n```\r\n\r\nHowever, adding `sudo`, it works okay:\r\n\r\n```\r\n$ sudo go test path/filepath\r\nok  \tpath/filepath\t0.027s\r\n```\r\n\r\nThis happens because `TestWalk` calls `makeTree`, which tries to create new files in `GOROOT/src/path/filepath` directory. Since the GOROOT directory isn't writeable by normal user, creating the test tree fails. Then, trying to walk the tree results in a nil pointer dereference panic.\r\n\r\nI'm not sure why `TestWalk` tries to write in GOROOT at all. Shouldn't it create a temporary directory and use that?",
      "score": 1.0
    },
    {
      "url": "https://api.github.com/repos/golang/go/issues/23880",
      "repository_url": "https://api.github.com/repos/golang/go",
      "labels_url": "https://api.github.com/repos/golang/go/issues/23880/labels{/name}",
      "comments_url": "https://api.github.com/repos/golang/go/issues/23880/comments",
      "events_url": "https://api.github.com/repos/golang/go/issues/23880/events",
      "html_url": "https://github.com/golang/go/issues/23880",
      "id": 297952464,
      "number": 23880,
      "title": "constexpr() or custom preprocessor for go build",
      "user": {
        "login": "gitsomecrabs",
        "id": 20345320,
        "avatar_url": "https://avatars2.githubusercontent.com/u/20345320?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/gitsomecrabs",
        "html_url": "https://github.com/gitsomecrabs",
        "followers_url": "https://api.github.com/users/gitsomecrabs/followers",
        "following_url": "https://api.github.com/users/gitsomecrabs/following{/other_user}",
        "gists_url": "https://api.github.com/users/gitsomecrabs/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/gitsomecrabs/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/gitsomecrabs/subscriptions",
        "organizations_url": "https://api.github.com/users/gitsomecrabs/orgs",
        "repos_url": "https://api.github.com/users/gitsomecrabs/repos",
        "events_url": "https://api.github.com/users/gitsomecrabs/events{/privacy}",
        "received_events_url": "https://api.github.com/users/gitsomecrabs/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [

      ],
      "state": "closed",
      "locked": false,
      "assignee": null,
      "assignees": [

      ],
      "milestone": null,
      "comments": 1,
      "created_at": "2018-02-16T23:36:46Z",
      "updated_at": "2018-02-16T23:44:52Z",
      "closed_at": "2018-02-16T23:44:52Z",
      "author_association": "NONE",
      "body": "Please answer these questions before submitting your issue. Thanks!\r\n\r\n### What version of Go are you using (`go version`)?\r\n1.10\r\n\r\n### Does this issue reproduce with the latest release?\r\nYes, because not part of the language or toolchain\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\nOSX,Windows,LInux\r\n\r\n### What did you do?\r\nHad to hack the \"go generate\" command to preprocess source code, does not run automatically\r\nas part of go build, must run explicity and separately, which is bad.  \r\n\r\nHack preprocessor has to edit original source code, also very bad.  Not like constexpr( ) which is compile time execution of C functions but leaves the source code untouched!\r\n",
      "score": 1.0
    },
    {
      "url": "https://api.github.com/repos/golang/go/issues/23879",
      "repository_url": "https://api.github.com/repos/golang/go",
      "labels_url": "https://api.github.com/repos/golang/go/issues/23879/labels{/name}",
      "comments_url": "https://api.github.com/repos/golang/go/issues/23879/comments",
      "events_url": "https://api.github.com/repos/golang/go/issues/23879/events",
      "html_url": "https://github.com/golang/go/issues/23879",
      "id": 297949252,
      "number": 23879,
      "title": "database/sql: Please don't spawn canceler goroutine when context passed to Query cannot be canceled",
      "user": {
        "login": "navytux",
        "id": 1794248,
        "avatar_url": "https://avatars1.githubusercontent.com/u/1794248?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/navytux",
        "html_url": "https://github.com/navytux",
        "followers_url": "https://api.github.com/users/navytux/followers",
        "following_url": "https://api.github.com/users/navytux/following{/other_user}",
        "gists_url": "https://api.github.com/users/navytux/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/navytux/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/navytux/subscriptions",
        "organizations_url": "https://api.github.com/users/navytux/orgs",
        "repos_url": "https://api.github.com/users/navytux/repos",
        "events_url": "https://api.github.com/users/navytux/events{/privacy}",
        "received_events_url": "https://api.github.com/users/navytux/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [

      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [

      ],
      "milestone": null,
      "comments": 0,
      "created_at": "2018-02-16T23:16:56Z",
      "updated_at": "2018-02-16T23:16:56Z",
      "closed_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "Currently database/sql spawns goroutine for every Query made through it. In case an SQL driver works with local disk (thus non-network system calls) and in particalur is CGo based this can be harming performance. Let me qoute myself from https://github.com/golang/go/issues/21827#issuecomment-366332843:\r\n\r\n---- 8< ----\r\nI've hit the case with SQLite (only Cgo, no LockOSThread) where presense of other goroutines combined with Cgo calls on \"main\" one show big overhead: github.com/mattn/go-sqlite3 uses CGo and performs several CGo calls inside one Query or Exec. There was also an interrupt goroutine spawned for every Query or Exec to call `sqlite3_interrup` if context is canceled.\r\n\r\nWith Go1.10 avoiding to spawn that interrupt goroutine, if we know the context cannot be canceled, brings ~ 1.5x speedup to Exec (https://github.com/mattn/go-sqlite3/pull/530).\r\n\r\nHowever Query was made faster only by 5% because after https://github.com/golang/go/commit/2b283ced (/cc @kardianos, @bradfitz) database/sql always spawns a goroutine to close Rows on context or transaction cancel.\r\n\r\n( @kardianos it would be nice if somehow we could avoid spawning `Rows.awaitDone` if original query context cannot be cancelled. Because with the following test patch:\r\n\r\n```diff\r\ndiff --git a/src/database/sql/sql.go b/src/database/sql/sql.go\r\nindex 8f5588ed26..4345aa736a 100644\r\n--- a/src/database/sql/sql.go\r\n+++ b/src/database/sql/sql.go\r\n@@ -2568,6 +2568,7 @@ type Rows struct {\r\n }\r\n \r\n func (rs *Rows) initContextClose(ctx, txctx context.Context) {\r\n+       return\r\n        ctx, rs.cancel = context.WithCancel(ctx)\r\n        go rs.awaitDone(ctx, txctx)\r\n }\r\n```\r\n\r\nSQLite Query and rest becomes speed up too:\r\n\r\n        name               old req/s    new req/s    delta\r\n        Exec                 379k ± 1%    375k ± 3%     ~     (p=0.218 n=10+10)\r\n        Query               96.4k ± 1%  132.2k ± 3%  +37.14%  (p=0.000 n=10+10)\r\n        Params              87.0k ± 1%  117.2k ± 3%  +34.66%  (p=0.000 n=10+10)\r\n        Stmt                 129k ± 1%    178k ± 2%  +37.45%  (p=0.000 n=9+9)\r\n        Rows                3.06k ± 1%   3.45k ± 1%  +12.49%  (p=0.000 n=10+9)\r\n        StmtRows            3.13k ± 1%   3.54k ± 1%  +12.85%  (p=0.000 n=10+9)\r\n\r\n        name               old time/op  new time/op  delta\r\n        CustomFunctions-4  10.1µs ± 1%   7.2µs ± 2%  -28.68%  (p=0.000 n=10+10)\r\n\r\n/cc @mattn)\r\n\r\n---- 8< ---- \r\n\r\nI've reverified the situation is the same on latest tip (`go version devel +c941e27e70 Fri Feb 16 19:28:41 2018 +0000 linux/amd64`) so indeed if database/sql could be changed not to spawn 1 additional goroutine per every query if context cannot be canceled it would help.\r\n\r\nThanks beforehand,\r\nKirill\r\n",
      "score": 1.0
    },
    {
      "url": "https://api.github.com/repos/golang/go/issues/23878",
      "repository_url": "https://api.github.com/repos/golang/go",
      "labels_url": "https://api.github.com/repos/golang/go/issues/23878/labels{/name}",
      "comments_url": "https://api.github.com/repos/golang/go/issues/23878/comments",
      "events_url": "https://api.github.com/repos/golang/go/issues/23878/events",
      "html_url": "https://github.com/golang/go/issues/23878",
      "id": 297939114,
      "number": 23878,
      "title": "proposal: os: add ModeUnknown flag",
      "user": {
        "login": "dsnet",
        "id": 6354026,
        "avatar_url": "https://avatars1.githubusercontent.com/u/6354026?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dsnet",
        "html_url": "https://github.com/dsnet",
        "followers_url": "https://api.github.com/users/dsnet/followers",
        "following_url": "https://api.github.com/users/dsnet/following{/other_user}",
        "gists_url": "https://api.github.com/users/dsnet/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/dsnet/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/dsnet/subscriptions",
        "organizations_url": "https://api.github.com/users/dsnet/orgs",
        "repos_url": "https://api.github.com/users/dsnet/repos",
        "events_url": "https://api.github.com/users/dsnet/events{/privacy}",
        "received_events_url": "https://api.github.com/users/dsnet/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [
        {
          "id": 236419512,
          "url": "https://api.github.com/repos/golang/go/labels/Proposal",
          "name": "Proposal",
          "color": "ededed",
          "default": false
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [

      ],
      "milestone": {
        "url": "https://api.github.com/repos/golang/go/milestones/30",
        "html_url": "https://github.com/golang/go/milestone/30",
        "labels_url": "https://api.github.com/repos/golang/go/milestones/30/labels",
        "id": 1373555,
        "number": 30,
        "title": "Proposal",
        "description": "Proposals that are pending (not yet accepted/rejected).\r\n",
        "creator": {
          "login": "rsc",
          "id": 104030,
          "avatar_url": "https://avatars1.githubusercontent.com/u/104030?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/rsc",
          "html_url": "https://github.com/rsc",
          "followers_url": "https://api.github.com/users/rsc/followers",
          "following_url": "https://api.github.com/users/rsc/following{/other_user}",
          "gists_url": "https://api.github.com/users/rsc/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/rsc/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/rsc/subscriptions",
          "organizations_url": "https://api.github.com/users/rsc/orgs",
          "repos_url": "https://api.github.com/users/rsc/repos",
          "events_url": "https://api.github.com/users/rsc/events{/privacy}",
          "received_events_url": "https://api.github.com/users/rsc/received_events",
          "type": "User",
          "site_admin": false
        },
        "open_issues": 229,
        "closed_issues": 365,
        "state": "open",
        "created_at": "2015-10-24T01:40:49Z",
        "updated_at": "2018-02-18T01:26:47Z",
        "due_on": null,
        "closed_at": null
      },
      "comments": 0,
      "created_at": "2018-02-16T22:26:02Z",
      "updated_at": "2018-02-16T22:26:57Z",
      "closed_at": null,
      "author_association": "MEMBER",
      "body": "The [`os.FileInfo`](https://golang.org/pkg/os/#FileInfo) type is an interface, allowing other packages to implement it. One of the fields it returns is `Mode` which reports two pieces of information: 1) what the permissions are, and 2) what type of file it is. There is a helper method `os.FileMode.IsRegular` that reports whether the file is regular or not. Currently the only way to have `IsRegular` report false is to set the type to be one of the following:\r\n* `ModeDir` | `ModeSymlink` | `ModeNamedPipe` | `ModeSocket` | `ModeDevice`\r\n\r\nFor some implementations of `os.FileInfo` (see #22903 for an example), we want to be able to indicate that the file is *not* regular. However, every one of the aforementioned types to indicate non-regular are ill-suited as a general-purpose \"unknown\" file type.\r\n\r\nThus, I propose adding a `ModeUnknown` to serve exactly for that purpose. The `ModeUnknown` type carries no information other than the fact that the file is not regular.\r\n\r\n[CL/94856](https://golang.org/cl/94856) is one such implementation.\r\n\r\n\\cc @bradfitz @ianlancetaylor @robpike @rsc ",
      "score": 1.0
    },
    {
      "url": "https://api.github.com/repos/golang/go/issues/23877",
      "repository_url": "https://api.github.com/repos/golang/go",
      "labels_url": "https://api.github.com/repos/golang/go/issues/23877/labels{/name}",
      "comments_url": "https://api.github.com/repos/golang/go/issues/23877/comments",
      "events_url": "https://api.github.com/repos/golang/go/issues/23877/events",
      "html_url": "https://github.com/golang/go/issues/23877",
      "id": 297926611,
      "number": 23877,
      "title": "cmd/go: build does not allow for assembly output to be displayed on cached builds",
      "user": {
        "login": "dlsniper",
        "id": 607868,
        "avatar_url": "https://avatars2.githubusercontent.com/u/607868?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/dlsniper",
        "html_url": "https://github.com/dlsniper",
        "followers_url": "https://api.github.com/users/dlsniper/followers",
        "following_url": "https://api.github.com/users/dlsniper/following{/other_user}",
        "gists_url": "https://api.github.com/users/dlsniper/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/dlsniper/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/dlsniper/subscriptions",
        "organizations_url": "https://api.github.com/users/dlsniper/orgs",
        "repos_url": "https://api.github.com/users/dlsniper/repos",
        "events_url": "https://api.github.com/users/dlsniper/events{/privacy}",
        "received_events_url": "https://api.github.com/users/dlsniper/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [
        {
          "id": 373399998,
          "url": "https://api.github.com/repos/golang/go/labels/NeedsFix",
          "name": "NeedsFix",
          "color": "ededed",
          "default": false
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [

      ],
      "milestone": {
        "url": "https://api.github.com/repos/golang/go/milestones/70",
        "html_url": "https://github.com/golang/go/milestone/70",
        "labels_url": "https://api.github.com/repos/golang/go/milestones/70/labels",
        "id": 3117381,
        "number": 70,
        "title": "Go1.10.1",
        "description": "",
        "creator": {
          "login": "bradfitz",
          "id": 2621,
          "avatar_url": "https://avatars1.githubusercontent.com/u/2621?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/bradfitz",
          "html_url": "https://github.com/bradfitz",
          "followers_url": "https://api.github.com/users/bradfitz/followers",
          "following_url": "https://api.github.com/users/bradfitz/following{/other_user}",
          "gists_url": "https://api.github.com/users/bradfitz/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/bradfitz/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/bradfitz/subscriptions",
          "organizations_url": "https://api.github.com/users/bradfitz/orgs",
          "repos_url": "https://api.github.com/users/bradfitz/repos",
          "events_url": "https://api.github.com/users/bradfitz/events{/privacy}",
          "received_events_url": "https://api.github.com/users/bradfitz/received_events",
          "type": "User",
          "site_admin": false
        },
        "open_issues": 9,
        "closed_issues": 1,
        "state": "open",
        "created_at": "2018-02-14T19:15:03Z",
        "updated_at": "2018-02-17T03:16:27Z",
        "due_on": "2018-03-01T08:00:00Z",
        "closed_at": null
      },
      "comments": 6,
      "created_at": "2018-02-16T21:33:36Z",
      "updated_at": "2018-02-16T22:31:41Z",
      "closed_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "### What version of Go are you using (`go version`)?\r\ngo version go1.10 windows/amd64\r\n\r\n### Does this issue reproduce with the latest release?\r\nYes\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\nWindows 10 / amd64\r\n\r\n### What did you do?\r\nRan `  go build -gcflags -S file.go ` twice on a file that did not changed.\r\n\r\n### What did you expect to see?\r\nThe assembly output should be displayed twice.\r\n\r\n### What did you see instead?\r\nFirst time this works, second time this doesn't because of the caching. I understand why this happens but I don't particularly like the effect it has or the workaround, especially since on Windows it's still not trivial to run the workaround as is on other operating systems.\r\n\r\nThe workaround is: ` GODEBUG=gocacheverify=1 go build -gcflags -S file.go `.\r\n\r\nMy apologies for finding this so late.",
      "score": 1.0
    },
    {
      "url": "https://api.github.com/repos/golang/go/issues/23876",
      "repository_url": "https://api.github.com/repos/golang/go",
      "labels_url": "https://api.github.com/repos/golang/go/issues/23876/labels{/name}",
      "comments_url": "https://api.github.com/repos/golang/go/issues/23876/comments",
      "events_url": "https://api.github.com/repos/golang/go/issues/23876/events",
      "html_url": "https://github.com/golang/go/issues/23876",
      "id": 297913926,
      "number": 23876,
      "title": "Different results when using float64 constant vs float64(int) cast",
      "user": {
        "login": "klokare",
        "id": 17904143,
        "avatar_url": "https://avatars2.githubusercontent.com/u/17904143?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/klokare",
        "html_url": "https://github.com/klokare",
        "followers_url": "https://api.github.com/users/klokare/followers",
        "following_url": "https://api.github.com/users/klokare/following{/other_user}",
        "gists_url": "https://api.github.com/users/klokare/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/klokare/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/klokare/subscriptions",
        "organizations_url": "https://api.github.com/users/klokare/orgs",
        "repos_url": "https://api.github.com/users/klokare/repos",
        "events_url": "https://api.github.com/users/klokare/events{/privacy}",
        "received_events_url": "https://api.github.com/users/klokare/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [

      ],
      "state": "closed",
      "locked": false,
      "assignee": null,
      "assignees": [

      ],
      "milestone": null,
      "comments": 5,
      "created_at": "2018-02-16T20:42:22Z",
      "updated_at": "2018-02-16T21:58:13Z",
      "closed_at": "2018-02-16T21:58:13Z",
      "author_association": "NONE",
      "body": "Please answer these questions before submitting your issue. Thanks!\r\n\r\n\r\n### What version of Go are you using (`go version`)?\r\ngo version go1.9.4 darwin/amd64\r\n\r\n### Does this issue reproduce with the latest release?\r\nyes. I can replicated this on play.golang.org\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\nGOARCH=\"amd64\"\r\nGOHOSTARCH=\"amd64\"\r\nGOHOSTOS=\"darwin\"\r\nGOOS=\"darwin\"\r\n\r\n### What did you do?\r\nhttps://play.golang.org/p/o3I21mRFPt2\r\n\r\n```go\r\npackage main\r\n\r\nimport (\r\n\t\"fmt\"\r\n)\r\n\r\nfunc main() {\r\n\tfmt.Printf(\"CASE A: %0.20f\\n\", (1.0 + (4.0 * (1.0/7.0))/2.0) / 2.0)\r\n\tfmt.Printf(\"CASE B: %0.20f\\n\", (1.0 + (float64(4) * (1.0/7.0))/2.0) / 2.0)\r\n\t\r\n\tx := 4.0\r\n\ty := float64(4)\r\n\tfmt.Printf(\"CASE C: %0.20f\\n\", (1.0 + (x * (1.0/7.0))/2.0) / 2.0)\r\n\tfmt.Printf(\"CASE D: %0.20f\\n\", (1.0 + (y * (1.0/7.0))/2.0) / 2.0)\r\n}\r\n```\r\n```text\r\nCASE A: 0.64285714285714290472\r\nCASE B: 0.64285714285714279370\r\nCASE C: 0.64285714285714279370\r\nCASE D: 0.64285714285714279370\r\n```\r\n### What did you expect to see?\r\nAll cases should be equal\r\n\r\n### What did you see instead?\r\nCase A is different. When using 4.0 vs float64(4) directly, I get different results (Case A vs Case B). If I assign the values to variables then I get the same result (Case C and D are the same result as Case B). There appears to be some optimisation that is affecting the 4.0 constant.\r\n",
      "score": 1.0
    },
    {
      "url": "https://api.github.com/repos/golang/go/issues/23875",
      "repository_url": "https://api.github.com/repos/golang/go",
      "labels_url": "https://api.github.com/repos/golang/go/issues/23875/labels{/name}",
      "comments_url": "https://api.github.com/repos/golang/go/issues/23875/comments",
      "events_url": "https://api.github.com/repos/golang/go/issues/23875/events",
      "html_url": "https://github.com/golang/go/issues/23875",
      "id": 297909363,
      "number": 23875,
      "title": "cmd/cgo: unable to pass \"--static\" to pkgconfig",
      "user": {
        "login": "AlexRouSg",
        "id": 5820839,
        "avatar_url": "https://avatars3.githubusercontent.com/u/5820839?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/AlexRouSg",
        "html_url": "https://github.com/AlexRouSg",
        "followers_url": "https://api.github.com/users/AlexRouSg/followers",
        "following_url": "https://api.github.com/users/AlexRouSg/following{/other_user}",
        "gists_url": "https://api.github.com/users/AlexRouSg/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/AlexRouSg/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/AlexRouSg/subscriptions",
        "organizations_url": "https://api.github.com/users/AlexRouSg/orgs",
        "repos_url": "https://api.github.com/users/AlexRouSg/repos",
        "events_url": "https://api.github.com/users/AlexRouSg/events{/privacy}",
        "received_events_url": "https://api.github.com/users/AlexRouSg/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [
        {
          "id": 373402289,
          "url": "https://api.github.com/repos/golang/go/labels/NeedsInvestigation",
          "name": "NeedsInvestigation",
          "color": "ededed",
          "default": false
        },
        {
          "id": 626114820,
          "url": "https://api.github.com/repos/golang/go/labels/release-blocker",
          "name": "release-blocker",
          "color": "b60205",
          "default": false
        }
      ],
      "state": "closed",
      "locked": false,
      "assignee": null,
      "assignees": [

      ],
      "milestone": {
        "url": "https://api.github.com/repos/golang/go/milestones/70",
        "html_url": "https://github.com/golang/go/milestone/70",
        "labels_url": "https://api.github.com/repos/golang/go/milestones/70/labels",
        "id": 3117381,
        "number": 70,
        "title": "Go1.10.1",
        "description": "",
        "creator": {
          "login": "bradfitz",
          "id": 2621,
          "avatar_url": "https://avatars1.githubusercontent.com/u/2621?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/bradfitz",
          "html_url": "https://github.com/bradfitz",
          "followers_url": "https://api.github.com/users/bradfitz/followers",
          "following_url": "https://api.github.com/users/bradfitz/following{/other_user}",
          "gists_url": "https://api.github.com/users/bradfitz/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/bradfitz/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/bradfitz/subscriptions",
          "organizations_url": "https://api.github.com/users/bradfitz/orgs",
          "repos_url": "https://api.github.com/users/bradfitz/repos",
          "events_url": "https://api.github.com/users/bradfitz/events{/privacy}",
          "received_events_url": "https://api.github.com/users/bradfitz/received_events",
          "type": "User",
          "site_admin": false
        },
        "open_issues": 9,
        "closed_issues": 1,
        "state": "open",
        "created_at": "2018-02-14T19:15:03Z",
        "updated_at": "2018-02-17T03:16:27Z",
        "due_on": "2018-03-01T08:00:00Z",
        "closed_at": null
      },
      "comments": 7,
      "created_at": "2018-02-16T20:24:17Z",
      "updated_at": "2018-02-17T03:16:27Z",
      "closed_at": "2018-02-17T03:16:27Z",
      "author_association": "NONE",
      "body": "Please answer these questions before submitting your issue. Thanks!\r\n\r\n\r\n### What version of Go are you using (`go version`)?\r\n1.10\r\n\r\n### Does this issue reproduce with the latest release?\r\nYes\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\nIrrevelent\r\n\r\n### What did you do?\r\n\r\nIf possible, provide a recipe for reproducing the error.\r\nA complete runnable program is good.\r\nA link on play.golang.org is best.\r\n\r\nI'm trying to build a package that static links C dependencies using pkg-config to set the flags.\r\nBefore the cgo security update for go get (1.9.3), doing `#cgo pkg-config: --static SDL2` would tell pkg-config to use the flags for static linking. As --static is a arg passed to pkg-config not the C compiler or linker, there is now no easy way to pass --static to pkg-config.\r\n\r\n\r\n### What did you expect to see?\r\nBuild succeed\r\n\r\n### What did you see instead?\r\nInvalid pkg-config package name: --static\r\n",
      "score": 1.0
    },
    {
      "url": "https://api.github.com/repos/golang/go/issues/23874",
      "repository_url": "https://api.github.com/repos/golang/go",
      "labels_url": "https://api.github.com/repos/golang/go/issues/23874/labels{/name}",
      "comments_url": "https://api.github.com/repos/golang/go/issues/23874/comments",
      "events_url": "https://api.github.com/repos/golang/go/issues/23874/events",
      "html_url": "https://github.com/golang/go/pull/23874",
      "id": 297877875,
      "number": 23874,
      "title": "CONTRIBUTORS: update my name and spelling.",
      "user": {
        "login": "OneOfOne",
        "id": 1080443,
        "avatar_url": "https://avatars2.githubusercontent.com/u/1080443?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/OneOfOne",
        "html_url": "https://github.com/OneOfOne",
        "followers_url": "https://api.github.com/users/OneOfOne/followers",
        "following_url": "https://api.github.com/users/OneOfOne/following{/other_user}",
        "gists_url": "https://api.github.com/users/OneOfOne/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/OneOfOne/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/OneOfOne/subscriptions",
        "organizations_url": "https://api.github.com/users/OneOfOne/orgs",
        "repos_url": "https://api.github.com/users/OneOfOne/repos",
        "events_url": "https://api.github.com/users/OneOfOne/events{/privacy}",
        "received_events_url": "https://api.github.com/users/OneOfOne/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [
        {
          "id": 831707000,
          "url": "https://api.github.com/repos/golang/go/labels/cla:%20yes",
          "name": "cla: yes",
          "color": "0e8a16",
          "default": false
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [

      ],
      "milestone": null,
      "comments": 4,
      "created_at": "2018-02-16T18:26:13Z",
      "updated_at": "2018-02-16T18:38:30Z",
      "closed_at": null,
      "author_association": "CONTRIBUTOR",
      "pull_request": {
        "url": "https://api.github.com/repos/golang/go/pulls/23874",
        "html_url": "https://github.com/golang/go/pull/23874",
        "diff_url": "https://github.com/golang/go/pull/23874.diff",
        "patch_url": "https://github.com/golang/go/pull/23874.patch"
      },
      "body": "My name was spelled wrong.\r\n\r\nAlso testing the new workflow with github PRs.\r\n",
      "score": 1.0
    },
    {
      "url": "https://api.github.com/repos/golang/go/issues/23873",
      "repository_url": "https://api.github.com/repos/golang/go",
      "labels_url": "https://api.github.com/repos/golang/go/issues/23873/labels{/name}",
      "comments_url": "https://api.github.com/repos/golang/go/issues/23873/comments",
      "events_url": "https://api.github.com/repos/golang/go/issues/23873/events",
      "html_url": "https://github.com/golang/go/issues/23873",
      "id": 297861657,
      "number": 23873,
      "title": "net: don't keep reading from UDP resolver after truncated packet",
      "user": {
        "login": "ianlancetaylor",
        "id": 3194333,
        "avatar_url": "https://avatars2.githubusercontent.com/u/3194333?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ianlancetaylor",
        "html_url": "https://github.com/ianlancetaylor",
        "followers_url": "https://api.github.com/users/ianlancetaylor/followers",
        "following_url": "https://api.github.com/users/ianlancetaylor/following{/other_user}",
        "gists_url": "https://api.github.com/users/ianlancetaylor/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/ianlancetaylor/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/ianlancetaylor/subscriptions",
        "organizations_url": "https://api.github.com/users/ianlancetaylor/orgs",
        "repos_url": "https://api.github.com/users/ianlancetaylor/repos",
        "events_url": "https://api.github.com/users/ianlancetaylor/events{/privacy}",
        "received_events_url": "https://api.github.com/users/ianlancetaylor/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [
        {
          "id": 373402289,
          "url": "https://api.github.com/repos/golang/go/labels/NeedsInvestigation",
          "name": "NeedsInvestigation",
          "color": "ededed",
          "default": false
        }
      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [

      ],
      "milestone": {
        "url": "https://api.github.com/repos/golang/go/milestones/62",
        "html_url": "https://github.com/golang/go/milestone/62",
        "labels_url": "https://api.github.com/repos/golang/go/milestones/62/labels",
        "id": 2827591,
        "number": 62,
        "title": "Go1.11",
        "description": "",
        "creator": {
          "login": "rsc",
          "id": 104030,
          "avatar_url": "https://avatars1.githubusercontent.com/u/104030?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/rsc",
          "html_url": "https://github.com/rsc",
          "followers_url": "https://api.github.com/users/rsc/followers",
          "following_url": "https://api.github.com/users/rsc/following{/other_user}",
          "gists_url": "https://api.github.com/users/rsc/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/rsc/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/rsc/subscriptions",
          "organizations_url": "https://api.github.com/users/rsc/orgs",
          "repos_url": "https://api.github.com/users/rsc/repos",
          "events_url": "https://api.github.com/users/rsc/events{/privacy}",
          "received_events_url": "https://api.github.com/users/rsc/received_events",
          "type": "User",
          "site_admin": false
        },
        "open_issues": 767,
        "closed_issues": 113,
        "state": "open",
        "created_at": "2017-10-10T13:39:17Z",
        "updated_at": "2018-02-17T18:36:40Z",
        "due_on": "2018-07-31T07:00:00Z",
        "closed_at": null
      },
      "comments": 0,
      "created_at": "2018-02-16T17:26:49Z",
      "updated_at": "2018-02-17T22:32:36Z",
      "closed_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "When the `host` or `dig` programs see a malformed packet from a resolver when using UDP, they fall back to using TCP.  The net package resolver does not do this; it simply ignores the malformed packet (in `(*dnsPacketConn).dnsRoundTrip` in net/dnsclient_unix.go).  This was done for #13281.  I suggest that we do the same.\r\n\r\nThis is showing up right now for me when I run `go test -test.run=TestLookupLongTXT net`.  I see this:\r\n\r\n```\r\n--- FAIL: TestLookupLongTXT (10.00s)\r\n\tlookup_test.go:334: lookup golang.rsc.io on 127.0.0.1:53: read udp 127.0.0.1:39779->127.0.0.1:53: i/o timeout\r\nFAIL\r\nFAIL\tnet\t10.023s\r\n```\r\n\r\nIf I run `dig -t txt golang.rsc.io` the output starts with\r\n\r\n```\r\n;; Warning: Message parser reports malformed message packet.\r\n;; Truncated, retrying in TCP mode.\r\n```\r\n\r\nI suggest that we keep the current behavior for the `!resp.IsResponseTo(query)` case but change the behavior for an `Unpack` failure to drop right back to TCP.\r\n\r\nCC @mdempsky ",
      "score": 1.0
    },
    {
      "url": "https://api.github.com/repos/golang/go/issues/23872",
      "repository_url": "https://api.github.com/repos/golang/go",
      "labels_url": "https://api.github.com/repos/golang/go/issues/23872/labels{/name}",
      "comments_url": "https://api.github.com/repos/golang/go/issues/23872/comments",
      "events_url": "https://api.github.com/repos/golang/go/issues/23872/events",
      "html_url": "https://github.com/golang/go/issues/23872",
      "id": 297861419,
      "number": 23872,
      "title": "doc: go Path wiki link in https://golang.org/doc/code.html is blank",
      "user": {
        "login": "btalpers",
        "id": 11773535,
        "avatar_url": "https://avatars1.githubusercontent.com/u/11773535?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/btalpers",
        "html_url": "https://github.com/btalpers",
        "followers_url": "https://api.github.com/users/btalpers/followers",
        "following_url": "https://api.github.com/users/btalpers/following{/other_user}",
        "gists_url": "https://api.github.com/users/btalpers/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/btalpers/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/btalpers/subscriptions",
        "organizations_url": "https://api.github.com/users/btalpers/orgs",
        "repos_url": "https://api.github.com/users/btalpers/repos",
        "events_url": "https://api.github.com/users/btalpers/events{/privacy}",
        "received_events_url": "https://api.github.com/users/btalpers/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [
        {
          "id": 150880209,
          "url": "https://api.github.com/repos/golang/go/labels/Documentation",
          "name": "Documentation",
          "color": "aaffaa",
          "default": false
        }
      ],
      "state": "closed",
      "locked": false,
      "assignee": null,
      "assignees": [

      ],
      "milestone": null,
      "comments": 4,
      "created_at": "2018-02-16T17:25:57Z",
      "updated_at": "2018-02-16T17:52:11Z",
      "closed_at": "2018-02-16T17:37:16Z",
      "author_association": "NONE",
      "body": "Please answer these questions before submitting your issue. Thanks!\r\n\r\n\r\n### What version of Go are you using (`go version`)?\r\nnone\r\n\r\n### Does this issue reproduce with the latest release?\r\nno\r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\nnone\r\n\r\n### What did you do?\r\nVisited https://golang.org/doc/code.html, and clicked any of the locations that redirect to https://github.com/golang/go/wiki/SettingGOPATH , which asks me to Create a new page for `SettingGOPATH`\r\n\r\nIf possible, provide a recipe for reproducing the error.\r\nSee above\r\n\r\nA complete runnable program is good.\r\nA link on play.golang.org is best.\r\n\r\n\r\n### What did you expect to see?\r\nAn actual documentation page.\r\n\r\n### What did you see instead?\r\n<img width=\"1041\" alt=\"screen shot 2018-02-16 at 11 25 38 am\" src=\"https://user-images.githubusercontent.com/11773535/36320534-276841da-130c-11e8-86c1-0826e897b50b.png\">\r\n\r\n",
      "score": 1.0
    },
    {
      "url": "https://api.github.com/repos/golang/go/issues/23871",
      "repository_url": "https://api.github.com/repos/golang/go",
      "labels_url": "https://api.github.com/repos/golang/go/issues/23871/labels{/name}",
      "comments_url": "https://api.github.com/repos/golang/go/issues/23871/comments",
      "events_url": "https://api.github.com/repos/golang/go/issues/23871/events",
      "html_url": "https://github.com/golang/go/issues/23871",
      "id": 297817337,
      "number": 23871,
      "title": "x/net/webdav: Doesn't interoperate with Windows 7 explorer",
      "user": {
        "login": "ncw",
        "id": 536803,
        "avatar_url": "https://avatars2.githubusercontent.com/u/536803?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ncw",
        "html_url": "https://github.com/ncw",
        "followers_url": "https://api.github.com/users/ncw/followers",
        "following_url": "https://api.github.com/users/ncw/following{/other_user}",
        "gists_url": "https://api.github.com/users/ncw/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/ncw/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/ncw/subscriptions",
        "organizations_url": "https://api.github.com/users/ncw/orgs",
        "repos_url": "https://api.github.com/users/ncw/repos",
        "events_url": "https://api.github.com/users/ncw/events{/privacy}",
        "received_events_url": "https://api.github.com/users/ncw/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [

      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [

      ],
      "milestone": {
        "url": "https://api.github.com/repos/golang/go/milestones/22",
        "html_url": "https://github.com/golang/go/milestone/22",
        "labels_url": "https://api.github.com/repos/golang/go/milestones/22/labels",
        "id": 1067491,
        "number": 22,
        "title": "Unreleased",
        "description": "Issues that do not affect released Go code and binaries.\r\n",
        "creator": {
          "login": "rsc",
          "id": 104030,
          "avatar_url": "https://avatars1.githubusercontent.com/u/104030?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/rsc",
          "html_url": "https://github.com/rsc",
          "followers_url": "https://api.github.com/users/rsc/followers",
          "following_url": "https://api.github.com/users/rsc/following{/other_user}",
          "gists_url": "https://api.github.com/users/rsc/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/rsc/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/rsc/subscriptions",
          "organizations_url": "https://api.github.com/users/rsc/orgs",
          "repos_url": "https://api.github.com/users/rsc/repos",
          "events_url": "https://api.github.com/users/rsc/events{/privacy}",
          "received_events_url": "https://api.github.com/users/rsc/received_events",
          "type": "User",
          "site_admin": false
        },
        "open_issues": 821,
        "closed_issues": 1203,
        "state": "open",
        "created_at": "2015-04-14T18:48:22Z",
        "updated_at": "2018-02-17T21:24:05Z",
        "due_on": "2099-12-31T08:00:00Z",
        "closed_at": null
      },
      "comments": 2,
      "created_at": "2018-02-16T15:14:12Z",
      "updated_at": "2018-02-17T11:49:01Z",
      "closed_at": null,
      "author_association": "CONTRIBUTOR",
      "body": "### What version of Go are you using (`go version`)?\r\n\r\n`go version go1.9.2 linux/amd64` with the latest `golang.org/x/net/webdav`\r\n\r\n### Does this issue reproduce with the latest release?\r\n\r\nYes.  \r\n\r\n### What operating system and processor architecture are you using (`go env`)?\r\n\r\nThis is Windows 7 386 running on VirtualBox.\r\n\r\n```\r\nX:\\go\\src\\github.com\\ncw\\rclone>go env\r\nset GOARCH=386\r\nset GOBIN=\r\nset GOEXE=.exe\r\nset GOHOSTARCH=386\r\nset GOHOSTOS=windows\r\nset GOOS=windows\r\nset GOPATH=C:\\Users\\Dev\\go\r\nset GORACE=\r\nset GOROOT=C:\\Go\r\nset GOTOOLDIR=C:\\Go\\pkg\\tool\\windows_386\r\nset GCCGO=gccgo\r\nset GO386=\r\nset CC=gcc\r\nset GOGCCFLAGS=-m32 -mthreads -fmessage-length=0 -fdebug-prefix-map=C:\\Users\\Dev\r\n\\AppData\\Local\\Temp\\go-build996106411=/tmp/go-build -gno-record-gcc-switches\r\nset CXX=g++\r\nset CGO_ENABLED=1\r\nset PKG_CONFIG=pkg-config\r\nset CGO_CFLAGS=-g -O2\r\nset CGO_CPPFLAGS=\r\nset CGO_CXXFLAGS=-g -O2\r\nset CGO_FFLAGS=-g -O2\r\nset CGO_LDFLAGS=-g -O2\r\n```\r\n\r\n### What did you do?\r\n\r\nCompiled [this program](https://gist.github.com/staaldraad/d835126cd46969330a8fdadba62b9b69) which is a very simple webdav server to serve a directory over webdav.\r\n\r\nI ran this in a command window with `webdavd.exe -p 8081 -d c:\\path\\to\\test\\dir`\r\n\r\nI then pointed windows explorer at it by putting in the url `\\\\localhost:8081\\`.  Windows explorer sees all the directories but none of the files and an attempt to click on a directory gives a permissions error.\r\n\r\nSource directory\r\n\r\n![image](https://user-images.githubusercontent.com/536803/36313723-60a623ae-132a-11e8-998e-d7cb53da3cff.png)\r\n\r\nDirectory when viewed via the webdav server.  I expected to see all the files and the folders here.\r\n\r\n![image](https://user-images.githubusercontent.com/536803/36313751-7e543ad0-132a-11e8-95e4-8462432b39f2.png)\r\n\r\nAnd the error message you get when clicking on a directory\r\n\r\n![image](https://user-images.githubusercontent.com/536803/36313767-984bd01a-132a-11e8-902b-55eaa659be55.png)\r\n\r\nAnd here is the server running in the cmd window\r\n\r\n![image](https://user-images.githubusercontent.com/536803/36313816-c6c34298-132a-11e8-8d94-8aa348b67a2b.png)\r\n\r\nI originally discovered this while trying out `rclone serve webdav` which has exactly the same problem.",
      "score": 1.0
    },
    {
      "url": "https://api.github.com/repos/golang/go/issues/23870",
      "repository_url": "https://api.github.com/repos/golang/go",
      "labels_url": "https://api.github.com/repos/golang/go/issues/23870/labels{/name}",
      "comments_url": "https://api.github.com/repos/golang/go/issues/23870/comments",
      "events_url": "https://api.github.com/repos/golang/go/issues/23870/events",
      "html_url": "https://github.com/golang/go/issues/23870",
      "id": 297817026,
      "number": 23870,
      "title": "gccgo: internal compiler error: in struct_field_expression",
      "user": {
        "login": "ALTree",
        "id": 3586803,
        "avatar_url": "https://avatars2.githubusercontent.com/u/3586803?v=4",
        "gravatar_id": "",
        "url": "https://api.github.com/users/ALTree",
        "html_url": "https://github.com/ALTree",
        "followers_url": "https://api.github.com/users/ALTree/followers",
        "following_url": "https://api.github.com/users/ALTree/following{/other_user}",
        "gists_url": "https://api.github.com/users/ALTree/gists{/gist_id}",
        "starred_url": "https://api.github.com/users/ALTree/starred{/owner}{/repo}",
        "subscriptions_url": "https://api.github.com/users/ALTree/subscriptions",
        "organizations_url": "https://api.github.com/users/ALTree/orgs",
        "repos_url": "https://api.github.com/users/ALTree/repos",
        "events_url": "https://api.github.com/users/ALTree/events{/privacy}",
        "received_events_url": "https://api.github.com/users/ALTree/received_events",
        "type": "User",
        "site_admin": false
      },
      "labels": [

      ],
      "state": "open",
      "locked": false,
      "assignee": null,
      "assignees": [

      ],
      "milestone": {
        "url": "https://api.github.com/repos/golang/go/milestones/23",
        "html_url": "https://github.com/golang/go/milestone/23",
        "labels_url": "https://api.github.com/repos/golang/go/milestones/23/labels",
        "id": 1069171,
        "number": 23,
        "title": "Gccgo",
        "description": "Issues to be fixed in the gccgo distribution (as opposed to the main Go repos).\r\n",
        "creator": {
          "login": "rsc",
          "id": 104030,
          "avatar_url": "https://avatars1.githubusercontent.com/u/104030?v=4",
          "gravatar_id": "",
          "url": "https://api.github.com/users/rsc",
          "html_url": "https://github.com/rsc",
          "followers_url": "https://api.github.com/users/rsc/followers",
          "following_url": "https://api.github.com/users/rsc/following{/other_user}",
          "gists_url": "https://api.github.com/users/rsc/gists{/gist_id}",
          "starred_url": "https://api.github.com/users/rsc/starred{/owner}{/repo}",
          "subscriptions_url": "https://api.github.com/users/rsc/subscriptions",
          "organizations_url": "https://api.github.com/users/rsc/orgs",
          "repos_url": "https://api.github.com/users/rsc/repos",
          "events_url": "https://api.github.com/users/rsc/events{/privacy}",
          "received_events_url": "https://api.github.com/users/rsc/received_events",
          "type": "User",
          "site_admin": false
        },
        "open_issues": 22,
        "closed_issues": 154,
        "state": "open",
        "created_at": "2015-04-15T17:34:15Z",
        "updated_at": "2018-02-16T15:13:14Z",
        "due_on": null,
        "closed_at": null
      },
      "comments": 0,
      "created_at": "2018-02-16T15:13:14Z",
      "updated_at": "2018-02-16T15:13:14Z",
      "closed_at": null,
      "author_association": "MEMBER",
      "body": "The following program (reduced from a gosmith-generated one)\r\n\r\n```\r\npackage p\r\n\r\nvar F func() [0]struct{\r\n\tA int \r\n}\r\n\r\nvar i int\r\nvar V = (F()[i]).A\r\n```\r\n\r\ncrashes `gccgo (GCC) 8.0.1 20180205 (experimental)` with the following error:\r\n\r\n```\r\ngo1: internal compiler error: in struct_field_expression, at go/go-gcc.cc:1539\r\n0x6e164b Gcc_backend::struct_field_expression(Bexpression*, unsigned long, Location)\r\n\t../../gcc-trunk/gcc/go/go-gcc.cc:1539\r\n0x6b8a81 Field_reference_expression::do_get_backend(Translate_context*)\r\n\t../../gcc-trunk/gcc/go/gofrontend/expressions.cc:11778\r\n0x6c839b Type_conversion_expression::do_get_backend(Translate_context*)\r\n\t../../gcc-trunk/gcc/go/gofrontend/expressions.cc:3542\r\n0x6ef008 Variable::get_init(Gogo*, Named_object*)\r\n\t../../gcc-trunk/gcc/go/gofrontend/gogo.cc:6670\r\n0x703979 Gogo::write_globals()\r\n\t../../gcc-trunk/gcc/go/gofrontend/gogo.cc:1377\r\n```\r\n\r\nThis gcc trunk build includes the fix for #22305, which no longer causes a crash; so I believe this is not a dup of #22305.",
      "score": 1.0
    }
  ]
}
